/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 266.0, "minX": 0.0, "maxY": 15701.0, "series": [{"data": [[0.0, 1137.0], [0.1, 1137.0], [0.2, 1137.0], [0.3, 1137.0], [0.4, 1137.0], [0.5, 1156.0], [0.6, 1156.0], [0.7, 1156.0], [0.8, 1156.0], [0.9, 1156.0], [1.0, 1163.0], [1.1, 1163.0], [1.2, 1163.0], [1.3, 1163.0], [1.4, 1163.0], [1.5, 1191.0], [1.6, 1191.0], [1.7, 1191.0], [1.8, 1191.0], [1.9, 1191.0], [2.0, 1193.0], [2.1, 1193.0], [2.2, 1193.0], [2.3, 1193.0], [2.4, 1193.0], [2.5, 1217.0], [2.6, 1217.0], [2.7, 1217.0], [2.8, 1217.0], [2.9, 1217.0], [3.0, 1243.0], [3.1, 1243.0], [3.2, 1243.0], [3.3, 1243.0], [3.4, 1243.0], [3.5, 1245.0], [3.6, 1245.0], [3.7, 1245.0], [3.8, 1245.0], [3.9, 1245.0], [4.0, 1282.0], [4.1, 1282.0], [4.2, 1282.0], [4.3, 1282.0], [4.4, 1282.0], [4.5, 1303.0], [4.6, 1303.0], [4.7, 1303.0], [4.8, 1303.0], [4.9, 1303.0], [5.0, 1326.0], [5.1, 1326.0], [5.2, 1326.0], [5.3, 1326.0], [5.4, 1326.0], [5.5, 1338.0], [5.6, 1338.0], [5.7, 1338.0], [5.8, 1338.0], [5.9, 1338.0], [6.0, 1343.0], [6.1, 1343.0], [6.2, 1343.0], [6.3, 1343.0], [6.4, 1343.0], [6.5, 1351.0], [6.6, 1351.0], [6.7, 1351.0], [6.8, 1351.0], [6.9, 1351.0], [7.0, 1362.0], [7.1, 1362.0], [7.2, 1362.0], [7.3, 1362.0], [7.4, 1362.0], [7.5, 1362.0], [7.6, 1362.0], [7.7, 1362.0], [7.8, 1362.0], [7.9, 1362.0], [8.0, 1366.0], [8.1, 1366.0], [8.2, 1366.0], [8.3, 1366.0], [8.4, 1366.0], [8.5, 1406.0], [8.6, 1406.0], [8.7, 1406.0], [8.8, 1406.0], [8.9, 1406.0], [9.0, 1440.0], [9.1, 1440.0], [9.2, 1440.0], [9.3, 1440.0], [9.4, 1440.0], [9.5, 1443.0], [9.6, 1443.0], [9.7, 1443.0], [9.8, 1443.0], [9.9, 1443.0], [10.0, 1677.0], [10.1, 1677.0], [10.2, 1677.0], [10.3, 1677.0], [10.4, 1677.0], [10.5, 1869.0], [10.6, 1869.0], [10.7, 1869.0], [10.8, 1869.0], [10.9, 1869.0], [11.0, 1871.0], [11.1, 1871.0], [11.2, 1871.0], [11.3, 1871.0], [11.4, 1871.0], [11.5, 1874.0], [11.6, 1874.0], [11.7, 1874.0], [11.8, 1874.0], [11.9, 1874.0], [12.0, 1881.0], [12.1, 1881.0], [12.2, 1881.0], [12.3, 1881.0], [12.4, 1881.0], [12.5, 1884.0], [12.6, 1884.0], [12.7, 1884.0], [12.8, 1884.0], [12.9, 1884.0], [13.0, 1886.0], [13.1, 1886.0], [13.2, 1886.0], [13.3, 1886.0], [13.4, 1886.0], [13.5, 1897.0], [13.6, 1897.0], [13.7, 1897.0], [13.8, 1897.0], [13.9, 1897.0], [14.0, 1899.0], [14.1, 1899.0], [14.2, 1899.0], [14.3, 1899.0], [14.4, 1899.0], [14.5, 1904.0], [14.6, 1904.0], [14.7, 1904.0], [14.8, 1904.0], [14.9, 1904.0], [15.0, 1954.0], [15.1, 1954.0], [15.2, 1954.0], [15.3, 1954.0], [15.4, 1954.0], [15.5, 1984.0], [15.6, 1984.0], [15.7, 1984.0], [15.8, 1984.0], [15.9, 1984.0], [16.0, 2089.0], [16.1, 2089.0], [16.2, 2089.0], [16.3, 2089.0], [16.4, 2089.0], [16.5, 2097.0], [16.6, 2097.0], [16.7, 2097.0], [16.8, 2097.0], [16.9, 2097.0], [17.0, 2174.0], [17.1, 2174.0], [17.2, 2174.0], [17.3, 2174.0], [17.4, 2174.0], [17.5, 2174.0], [17.6, 2174.0], [17.7, 2174.0], [17.8, 2174.0], [17.9, 2174.0], [18.0, 2176.0], [18.1, 2176.0], [18.2, 2176.0], [18.3, 2176.0], [18.4, 2176.0], [18.5, 2238.0], [18.6, 2238.0], [18.7, 2238.0], [18.8, 2238.0], [18.9, 2238.0], [19.0, 2328.0], [19.1, 2328.0], [19.2, 2328.0], [19.3, 2328.0], [19.4, 2328.0], [19.5, 2383.0], [19.6, 2383.0], [19.7, 2383.0], [19.8, 2383.0], [19.9, 2383.0], [20.0, 2440.0], [20.1, 2440.0], [20.2, 2440.0], [20.3, 2440.0], [20.4, 2440.0], [20.5, 2449.0], [20.6, 2449.0], [20.7, 2449.0], [20.8, 2449.0], [20.9, 2449.0], [21.0, 2557.0], [21.1, 2557.0], [21.2, 2557.0], [21.3, 2557.0], [21.4, 2557.0], [21.5, 2587.0], [21.6, 2587.0], [21.7, 2587.0], [21.8, 2587.0], [21.9, 2587.0], [22.0, 2588.0], [22.1, 2588.0], [22.2, 2588.0], [22.3, 2588.0], [22.4, 2588.0], [22.5, 2616.0], [22.6, 2616.0], [22.7, 2616.0], [22.8, 2616.0], [22.9, 2616.0], [23.0, 2625.0], [23.1, 2625.0], [23.2, 2625.0], [23.3, 2625.0], [23.4, 2625.0], [23.5, 2719.0], [23.6, 2719.0], [23.7, 2719.0], [23.8, 2719.0], [23.9, 2719.0], [24.0, 2786.0], [24.1, 2786.0], [24.2, 2786.0], [24.3, 2786.0], [24.4, 2786.0], [24.5, 2799.0], [24.6, 2799.0], [24.7, 2799.0], [24.8, 2799.0], [24.9, 2799.0], [25.0, 2826.0], [25.1, 2826.0], [25.2, 2826.0], [25.3, 2826.0], [25.4, 2826.0], [25.5, 2887.0], [25.6, 2887.0], [25.7, 2887.0], [25.8, 2887.0], [25.9, 2887.0], [26.0, 2896.0], [26.1, 2896.0], [26.2, 2896.0], [26.3, 2896.0], [26.4, 2896.0], [26.5, 2920.0], [26.6, 2920.0], [26.7, 2920.0], [26.8, 2920.0], [26.9, 2920.0], [27.0, 2960.0], [27.1, 2960.0], [27.2, 2960.0], [27.3, 2960.0], [27.4, 2960.0], [27.5, 2968.0], [27.6, 2968.0], [27.7, 2968.0], [27.8, 2968.0], [27.9, 2968.0], [28.0, 2969.0], [28.1, 2969.0], [28.2, 2969.0], [28.3, 2969.0], [28.4, 2969.0], [28.5, 2973.0], [28.6, 2973.0], [28.7, 2973.0], [28.8, 2973.0], [28.9, 2973.0], [29.0, 3035.0], [29.1, 3035.0], [29.2, 3035.0], [29.3, 3035.0], [29.4, 3035.0], [29.5, 3065.0], [29.6, 3065.0], [29.7, 3065.0], [29.8, 3065.0], [29.9, 3065.0], [30.0, 3181.0], [30.1, 3181.0], [30.2, 3181.0], [30.3, 3181.0], [30.4, 3181.0], [30.5, 3188.0], [30.6, 3188.0], [30.7, 3188.0], [30.8, 3188.0], [30.9, 3188.0], [31.0, 3188.0], [31.1, 3188.0], [31.2, 3188.0], [31.3, 3188.0], [31.4, 3188.0], [31.5, 3216.0], [31.6, 3216.0], [31.7, 3216.0], [31.8, 3216.0], [31.9, 3216.0], [32.0, 3217.0], [32.1, 3217.0], [32.2, 3217.0], [32.3, 3217.0], [32.4, 3217.0], [32.5, 3295.0], [32.6, 3295.0], [32.7, 3295.0], [32.8, 3295.0], [32.9, 3295.0], [33.0, 3460.0], [33.1, 3460.0], [33.2, 3460.0], [33.3, 3460.0], [33.4, 3460.0], [33.5, 3499.0], [33.6, 3499.0], [33.7, 3499.0], [33.8, 3499.0], [33.9, 3499.0], [34.0, 3505.0], [34.1, 3505.0], [34.2, 3505.0], [34.3, 3505.0], [34.4, 3505.0], [34.5, 3541.0], [34.6, 3541.0], [34.7, 3541.0], [34.8, 3541.0], [34.9, 3541.0], [35.0, 3567.0], [35.1, 3567.0], [35.2, 3567.0], [35.3, 3567.0], [35.4, 3567.0], [35.5, 3578.0], [35.6, 3578.0], [35.7, 3578.0], [35.8, 3578.0], [35.9, 3578.0], [36.0, 3594.0], [36.1, 3594.0], [36.2, 3594.0], [36.3, 3594.0], [36.4, 3594.0], [36.5, 3666.0], [36.6, 3666.0], [36.7, 3666.0], [36.8, 3666.0], [36.9, 3666.0], [37.0, 3726.0], [37.1, 3726.0], [37.2, 3726.0], [37.3, 3726.0], [37.4, 3726.0], [37.5, 3769.0], [37.6, 3769.0], [37.7, 3769.0], [37.8, 3769.0], [37.9, 3769.0], [38.0, 3790.0], [38.1, 3790.0], [38.2, 3790.0], [38.3, 3790.0], [38.4, 3790.0], [38.5, 3802.0], [38.6, 3802.0], [38.7, 3802.0], [38.8, 3802.0], [38.9, 3802.0], [39.0, 3818.0], [39.1, 3818.0], [39.2, 3818.0], [39.3, 3818.0], [39.4, 3818.0], [39.5, 3841.0], [39.6, 3841.0], [39.7, 3841.0], [39.8, 3841.0], [39.9, 3841.0], [40.0, 3889.0], [40.1, 3889.0], [40.2, 3889.0], [40.3, 3889.0], [40.4, 3889.0], [40.5, 3889.0], [40.6, 3889.0], [40.7, 3889.0], [40.8, 3889.0], [40.9, 3889.0], [41.0, 4170.0], [41.1, 4170.0], [41.2, 4170.0], [41.3, 4170.0], [41.4, 4170.0], [41.5, 4310.0], [41.6, 4310.0], [41.7, 4310.0], [41.8, 4310.0], [41.9, 4310.0], [42.0, 4325.0], [42.1, 4325.0], [42.2, 4325.0], [42.3, 4325.0], [42.4, 4325.0], [42.5, 4326.0], [42.6, 4326.0], [42.7, 4326.0], [42.8, 4326.0], [42.9, 4326.0], [43.0, 4342.0], [43.1, 4342.0], [43.2, 4342.0], [43.3, 4342.0], [43.4, 4342.0], [43.5, 4381.0], [43.6, 4381.0], [43.7, 4381.0], [43.8, 4381.0], [43.9, 4381.0], [44.0, 4392.0], [44.1, 4392.0], [44.2, 4392.0], [44.3, 4392.0], [44.4, 4392.0], [44.5, 4477.0], [44.6, 4477.0], [44.7, 4477.0], [44.8, 4477.0], [44.9, 4477.0], [45.0, 4634.0], [45.1, 4634.0], [45.2, 4634.0], [45.3, 4634.0], [45.4, 4634.0], [45.5, 4733.0], [45.6, 4733.0], [45.7, 4733.0], [45.8, 4733.0], [45.9, 4733.0], [46.0, 4759.0], [46.1, 4759.0], [46.2, 4759.0], [46.3, 4759.0], [46.4, 4759.0], [46.5, 4809.0], [46.6, 4809.0], [46.7, 4809.0], [46.8, 4809.0], [46.9, 4809.0], [47.0, 4835.0], [47.1, 4835.0], [47.2, 4835.0], [47.3, 4835.0], [47.4, 4835.0], [47.5, 4848.0], [47.6, 4848.0], [47.7, 4848.0], [47.8, 4848.0], [47.9, 4848.0], [48.0, 4947.0], [48.1, 4947.0], [48.2, 4947.0], [48.3, 4947.0], [48.4, 4947.0], [48.5, 4952.0], [48.6, 4952.0], [48.7, 4952.0], [48.8, 4952.0], [48.9, 4952.0], [49.0, 4960.0], [49.1, 4960.0], [49.2, 4960.0], [49.3, 4960.0], [49.4, 4960.0], [49.5, 5041.0], [49.6, 5041.0], [49.7, 5041.0], [49.8, 5041.0], [49.9, 5041.0], [50.0, 5207.0], [50.1, 5207.0], [50.2, 5207.0], [50.3, 5207.0], [50.4, 5207.0], [50.5, 5328.0], [50.6, 5328.0], [50.7, 5328.0], [50.8, 5328.0], [50.9, 5328.0], [51.0, 5330.0], [51.1, 5330.0], [51.2, 5330.0], [51.3, 5330.0], [51.4, 5330.0], [51.5, 5452.0], [51.6, 5452.0], [51.7, 5452.0], [51.8, 5452.0], [51.9, 5452.0], [52.0, 5484.0], [52.1, 5484.0], [52.2, 5484.0], [52.3, 5484.0], [52.4, 5484.0], [52.5, 5536.0], [52.6, 5536.0], [52.7, 5536.0], [52.8, 5536.0], [52.9, 5536.0], [53.0, 5554.0], [53.1, 5554.0], [53.2, 5554.0], [53.3, 5554.0], [53.4, 5554.0], [53.5, 5605.0], [53.6, 5605.0], [53.7, 5605.0], [53.8, 5605.0], [53.9, 5605.0], [54.0, 5651.0], [54.1, 5651.0], [54.2, 5651.0], [54.3, 5651.0], [54.4, 5651.0], [54.5, 5687.0], [54.6, 5687.0], [54.7, 5687.0], [54.8, 5687.0], [54.9, 5687.0], [55.0, 5740.0], [55.1, 5740.0], [55.2, 5740.0], [55.3, 5740.0], [55.4, 5740.0], [55.5, 5748.0], [55.6, 5748.0], [55.7, 5748.0], [55.8, 5748.0], [55.9, 5748.0], [56.0, 5866.0], [56.1, 5866.0], [56.2, 5866.0], [56.3, 5866.0], [56.4, 5866.0], [56.5, 5904.0], [56.6, 5904.0], [56.7, 5904.0], [56.8, 5904.0], [56.9, 5904.0], [57.0, 5979.0], [57.1, 5979.0], [57.2, 5979.0], [57.3, 5979.0], [57.4, 5979.0], [57.5, 6020.0], [57.6, 6020.0], [57.7, 6020.0], [57.8, 6020.0], [57.9, 6020.0], [58.0, 6067.0], [58.1, 6067.0], [58.2, 6067.0], [58.3, 6067.0], [58.4, 6067.0], [58.5, 6120.0], [58.6, 6120.0], [58.7, 6120.0], [58.8, 6120.0], [58.9, 6120.0], [59.0, 6246.0], [59.1, 6246.0], [59.2, 6246.0], [59.3, 6246.0], [59.4, 6246.0], [59.5, 6323.0], [59.6, 6323.0], [59.7, 6323.0], [59.8, 6323.0], [59.9, 6323.0], [60.0, 6345.0], [60.1, 6345.0], [60.2, 6345.0], [60.3, 6345.0], [60.4, 6345.0], [60.5, 6349.0], [60.6, 6349.0], [60.7, 6349.0], [60.8, 6349.0], [60.9, 6349.0], [61.0, 6378.0], [61.1, 6378.0], [61.2, 6378.0], [61.3, 6378.0], [61.4, 6378.0], [61.5, 6379.0], [61.6, 6379.0], [61.7, 6379.0], [61.8, 6379.0], [61.9, 6379.0], [62.0, 6386.0], [62.1, 6386.0], [62.2, 6386.0], [62.3, 6386.0], [62.4, 6386.0], [62.5, 6431.0], [62.6, 6431.0], [62.7, 6431.0], [62.8, 6431.0], [62.9, 6431.0], [63.0, 6444.0], [63.1, 6444.0], [63.2, 6444.0], [63.3, 6444.0], [63.4, 6444.0], [63.5, 6502.0], [63.6, 6502.0], [63.7, 6502.0], [63.8, 6502.0], [63.9, 6502.0], [64.0, 6513.0], [64.1, 6513.0], [64.2, 6513.0], [64.3, 6513.0], [64.4, 6513.0], [64.5, 6520.0], [64.6, 6520.0], [64.7, 6520.0], [64.8, 6520.0], [64.9, 6520.0], [65.0, 6638.0], [65.1, 6638.0], [65.2, 6638.0], [65.3, 6638.0], [65.4, 6638.0], [65.5, 6640.0], [65.6, 6640.0], [65.7, 6640.0], [65.8, 6640.0], [65.9, 6640.0], [66.0, 6746.0], [66.1, 6746.0], [66.2, 6746.0], [66.3, 6746.0], [66.4, 6746.0], [66.5, 6880.0], [66.6, 6880.0], [66.7, 6880.0], [66.8, 6880.0], [66.9, 6880.0], [67.0, 7092.0], [67.1, 7092.0], [67.2, 7092.0], [67.3, 7092.0], [67.4, 7092.0], [67.5, 7100.0], [67.6, 7100.0], [67.7, 7100.0], [67.8, 7100.0], [67.9, 7100.0], [68.0, 7235.0], [68.1, 7235.0], [68.2, 7235.0], [68.3, 7235.0], [68.4, 7235.0], [68.5, 7316.0], [68.6, 7316.0], [68.7, 7316.0], [68.8, 7316.0], [68.9, 7316.0], [69.0, 7340.0], [69.1, 7340.0], [69.2, 7340.0], [69.3, 7340.0], [69.4, 7340.0], [69.5, 7385.0], [69.6, 7385.0], [69.7, 7385.0], [69.8, 7385.0], [69.9, 7385.0], [70.0, 7412.0], [70.1, 7412.0], [70.2, 7412.0], [70.3, 7412.0], [70.4, 7412.0], [70.5, 7422.0], [70.6, 7422.0], [70.7, 7422.0], [70.8, 7422.0], [70.9, 7422.0], [71.0, 7425.0], [71.1, 7425.0], [71.2, 7425.0], [71.3, 7425.0], [71.4, 7425.0], [71.5, 7429.0], [71.6, 7429.0], [71.7, 7429.0], [71.8, 7429.0], [71.9, 7429.0], [72.0, 7432.0], [72.1, 7432.0], [72.2, 7432.0], [72.3, 7432.0], [72.4, 7432.0], [72.5, 7433.0], [72.6, 7433.0], [72.7, 7433.0], [72.8, 7433.0], [72.9, 7433.0], [73.0, 7434.0], [73.1, 7434.0], [73.2, 7434.0], [73.3, 7434.0], [73.4, 7434.0], [73.5, 7437.0], [73.6, 7437.0], [73.7, 7437.0], [73.8, 7437.0], [73.9, 7437.0], [74.0, 7438.0], [74.1, 7438.0], [74.2, 7438.0], [74.3, 7438.0], [74.4, 7438.0], [74.5, 7440.0], [74.6, 7440.0], [74.7, 7440.0], [74.8, 7440.0], [74.9, 7440.0], [75.0, 7449.0], [75.1, 7449.0], [75.2, 7449.0], [75.3, 7449.0], [75.4, 7449.0], [75.5, 7449.0], [75.6, 7449.0], [75.7, 7449.0], [75.8, 7449.0], [75.9, 7449.0], [76.0, 7449.0], [76.1, 7449.0], [76.2, 7449.0], [76.3, 7449.0], [76.4, 7449.0], [76.5, 7485.0], [76.6, 7485.0], [76.7, 7485.0], [76.8, 7485.0], [76.9, 7485.0], [77.0, 7543.0], [77.1, 7543.0], [77.2, 7543.0], [77.3, 7543.0], [77.4, 7543.0], [77.5, 7637.0], [77.6, 7637.0], [77.7, 7637.0], [77.8, 7637.0], [77.9, 7637.0], [78.0, 7685.0], [78.1, 7685.0], [78.2, 7685.0], [78.3, 7685.0], [78.4, 7685.0], [78.5, 7704.0], [78.6, 7704.0], [78.7, 7704.0], [78.8, 7704.0], [78.9, 7704.0], [79.0, 7798.0], [79.1, 7798.0], [79.2, 7798.0], [79.3, 7798.0], [79.4, 7798.0], [79.5, 7924.0], [79.6, 7924.0], [79.7, 7924.0], [79.8, 7924.0], [79.9, 7924.0], [80.0, 7979.0], [80.1, 7979.0], [80.2, 7979.0], [80.3, 7979.0], [80.4, 7979.0], [80.5, 8027.0], [80.6, 8027.0], [80.7, 8027.0], [80.8, 8027.0], [80.9, 8027.0], [81.0, 8032.0], [81.1, 8032.0], [81.2, 8032.0], [81.3, 8032.0], [81.4, 8032.0], [81.5, 8313.0], [81.6, 8313.0], [81.7, 8313.0], [81.8, 8313.0], [81.9, 8313.0], [82.0, 8458.0], [82.1, 8458.0], [82.2, 8458.0], [82.3, 8458.0], [82.4, 8458.0], [82.5, 8467.0], [82.6, 8467.0], [82.7, 8467.0], [82.8, 8467.0], [82.9, 8467.0], [83.0, 8503.0], [83.1, 8503.0], [83.2, 8503.0], [83.3, 8503.0], [83.4, 8503.0], [83.5, 8521.0], [83.6, 8521.0], [83.7, 8521.0], [83.8, 8521.0], [83.9, 8521.0], [84.0, 8585.0], [84.1, 8585.0], [84.2, 8585.0], [84.3, 8585.0], [84.4, 8585.0], [84.5, 8605.0], [84.6, 8605.0], [84.7, 8605.0], [84.8, 8605.0], [84.9, 8605.0], [85.0, 8657.0], [85.1, 8657.0], [85.2, 8657.0], [85.3, 8657.0], [85.4, 8657.0], [85.5, 8665.0], [85.6, 8665.0], [85.7, 8665.0], [85.8, 8665.0], [85.9, 8665.0], [86.0, 8675.0], [86.1, 8675.0], [86.2, 8675.0], [86.3, 8675.0], [86.4, 8675.0], [86.5, 8810.0], [86.6, 8810.0], [86.7, 8810.0], [86.8, 8810.0], [86.9, 8810.0], [87.0, 8819.0], [87.1, 8819.0], [87.2, 8819.0], [87.3, 8819.0], [87.4, 8819.0], [87.5, 8918.0], [87.6, 8918.0], [87.7, 8918.0], [87.8, 8918.0], [87.9, 8918.0], [88.0, 9258.0], [88.1, 9258.0], [88.2, 9258.0], [88.3, 9258.0], [88.4, 9258.0], [88.5, 9281.0], [88.6, 9281.0], [88.7, 9281.0], [88.8, 9281.0], [88.9, 9281.0], [89.0, 9509.0], [89.1, 9509.0], [89.2, 9509.0], [89.3, 9509.0], [89.4, 9509.0], [89.5, 9519.0], [89.6, 9519.0], [89.7, 9519.0], [89.8, 9519.0], [89.9, 9519.0], [90.0, 9539.0], [90.1, 9539.0], [90.2, 9539.0], [90.3, 9539.0], [90.4, 9539.0], [90.5, 9663.0], [90.6, 9663.0], [90.7, 9663.0], [90.8, 9663.0], [90.9, 9663.0], [91.0, 9727.0], [91.1, 9727.0], [91.2, 9727.0], [91.3, 9727.0], [91.4, 9727.0], [91.5, 9849.0], [91.6, 9849.0], [91.7, 9849.0], [91.8, 9849.0], [91.9, 9849.0], [92.0, 9872.0], [92.1, 9872.0], [92.2, 9872.0], [92.3, 9872.0], [92.4, 9872.0], [92.5, 10108.0], [92.6, 10108.0], [92.7, 10108.0], [92.8, 10108.0], [92.9, 10108.0], [93.0, 10549.0], [93.1, 10549.0], [93.2, 10549.0], [93.3, 10549.0], [93.4, 10549.0], [93.5, 11084.0], [93.6, 11084.0], [93.7, 11084.0], [93.8, 11084.0], [93.9, 11084.0], [94.0, 11109.0], [94.1, 11109.0], [94.2, 11109.0], [94.3, 11109.0], [94.4, 11109.0], [94.5, 11132.0], [94.6, 11132.0], [94.7, 11132.0], [94.8, 11132.0], [94.9, 11132.0], [95.0, 11410.0], [95.1, 11410.0], [95.2, 11410.0], [95.3, 11410.0], [95.4, 11410.0], [95.5, 11440.0], [95.6, 11440.0], [95.7, 11440.0], [95.8, 11440.0], [95.9, 11440.0], [96.0, 11709.0], [96.1, 11709.0], [96.2, 11709.0], [96.3, 11709.0], [96.4, 11709.0], [96.5, 11716.0], [96.6, 11716.0], [96.7, 11716.0], [96.8, 11716.0], [96.9, 11716.0], [97.0, 11869.0], [97.1, 11869.0], [97.2, 11869.0], [97.3, 11869.0], [97.4, 11869.0], [97.5, 12113.0], [97.6, 12113.0], [97.7, 12113.0], [97.8, 12113.0], [97.9, 12113.0], [98.0, 12210.0], [98.1, 12210.0], [98.2, 12210.0], [98.3, 12210.0], [98.4, 12210.0], [98.5, 13469.0], [98.6, 13469.0], [98.7, 13469.0], [98.8, 13469.0], [98.9, 13469.0], [99.0, 14913.0], [99.1, 14913.0], [99.2, 14913.0], [99.3, 14913.0], [99.4, 14913.0], [99.5, 15701.0], [99.6, 15701.0], [99.7, 15701.0], [99.8, 15701.0], [99.9, 15701.0]], "isOverall": false, "label": "auth", "isController": false}, {"data": [[0.0, 910.0], [0.1, 910.0], [0.2, 910.0], [0.3, 910.0], [0.4, 910.0], [0.5, 1136.0], [0.6, 1136.0], [0.7, 1136.0], [0.8, 1136.0], [0.9, 1136.0], [1.0, 1150.0], [1.1, 1150.0], [1.2, 1150.0], [1.3, 1150.0], [1.4, 1150.0], [1.5, 1227.0], [1.6, 1227.0], [1.7, 1227.0], [1.8, 1227.0], [1.9, 1227.0], [2.0, 1402.0], [2.1, 1402.0], [2.2, 1402.0], [2.3, 1402.0], [2.4, 1402.0], [2.5, 1404.0], [2.6, 1404.0], [2.7, 1404.0], [2.8, 1404.0], [2.9, 1404.0], [3.0, 1454.0], [3.1, 1454.0], [3.2, 1454.0], [3.3, 1454.0], [3.4, 1454.0], [3.5, 1471.0], [3.6, 1471.0], [3.7, 1471.0], [3.8, 1471.0], [3.9, 1471.0], [4.0, 1479.0], [4.1, 1479.0], [4.2, 1479.0], [4.3, 1479.0], [4.4, 1479.0], [4.5, 1543.0], [4.6, 1543.0], [4.7, 1543.0], [4.8, 1543.0], [4.9, 1543.0], [5.0, 1628.0], [5.1, 1628.0], [5.2, 1628.0], [5.3, 1628.0], [5.4, 1628.0], [5.5, 1634.0], [5.6, 1634.0], [5.7, 1634.0], [5.8, 1634.0], [5.9, 1634.0], [6.0, 1657.0], [6.1, 1657.0], [6.2, 1657.0], [6.3, 1657.0], [6.4, 1657.0], [6.5, 1713.0], [6.6, 1713.0], [6.7, 1713.0], [6.8, 1713.0], [6.9, 1713.0], [7.0, 1724.0], [7.1, 1724.0], [7.2, 1724.0], [7.3, 1724.0], [7.4, 1724.0], [7.5, 1769.0], [7.6, 1769.0], [7.7, 1769.0], [7.8, 1769.0], [7.9, 1769.0], [8.0, 1804.0], [8.1, 1804.0], [8.2, 1804.0], [8.3, 1804.0], [8.4, 1804.0], [8.5, 1820.0], [8.6, 1820.0], [8.7, 1820.0], [8.8, 1820.0], [8.9, 1820.0], [9.0, 1889.0], [9.1, 1889.0], [9.2, 1889.0], [9.3, 1889.0], [9.4, 1889.0], [9.5, 1915.0], [9.6, 1915.0], [9.7, 1915.0], [9.8, 1915.0], [9.9, 1915.0], [10.0, 1926.0], [10.1, 1926.0], [10.2, 1926.0], [10.3, 1926.0], [10.4, 1926.0], [10.5, 1978.0], [10.6, 1978.0], [10.7, 1978.0], [10.8, 1978.0], [10.9, 1978.0], [11.0, 1991.0], [11.1, 1991.0], [11.2, 1991.0], [11.3, 1991.0], [11.4, 1991.0], [11.5, 2032.0], [11.6, 2032.0], [11.7, 2032.0], [11.8, 2032.0], [11.9, 2032.0], [12.0, 2033.0], [12.1, 2033.0], [12.2, 2033.0], [12.3, 2033.0], [12.4, 2033.0], [12.5, 2048.0], [12.6, 2048.0], [12.7, 2048.0], [12.8, 2048.0], [12.9, 2048.0], [13.0, 2055.0], [13.1, 2055.0], [13.2, 2055.0], [13.3, 2055.0], [13.4, 2055.0], [13.5, 2056.0], [13.6, 2056.0], [13.7, 2056.0], [13.8, 2056.0], [13.9, 2056.0], [14.0, 2128.0], [14.1, 2128.0], [14.2, 2128.0], [14.3, 2128.0], [14.4, 2128.0], [14.5, 2147.0], [14.6, 2147.0], [14.7, 2147.0], [14.8, 2147.0], [14.9, 2147.0], [15.0, 2159.0], [15.1, 2159.0], [15.2, 2159.0], [15.3, 2159.0], [15.4, 2159.0], [15.5, 2173.0], [15.6, 2173.0], [15.7, 2173.0], [15.8, 2173.0], [15.9, 2173.0], [16.0, 2198.0], [16.1, 2198.0], [16.2, 2198.0], [16.3, 2198.0], [16.4, 2198.0], [16.5, 2228.0], [16.6, 2228.0], [16.7, 2228.0], [16.8, 2228.0], [16.9, 2228.0], [17.0, 2274.0], [17.1, 2274.0], [17.2, 2274.0], [17.3, 2274.0], [17.4, 2274.0], [17.5, 2292.0], [17.6, 2292.0], [17.7, 2292.0], [17.8, 2292.0], [17.9, 2292.0], [18.0, 2308.0], [18.1, 2308.0], [18.2, 2308.0], [18.3, 2308.0], [18.4, 2308.0], [18.5, 2324.0], [18.6, 2324.0], [18.7, 2324.0], [18.8, 2324.0], [18.9, 2324.0], [19.0, 2328.0], [19.1, 2328.0], [19.2, 2328.0], [19.3, 2328.0], [19.4, 2328.0], [19.5, 2337.0], [19.6, 2337.0], [19.7, 2337.0], [19.8, 2337.0], [19.9, 2337.0], [20.0, 2367.0], [20.1, 2367.0], [20.2, 2367.0], [20.3, 2367.0], [20.4, 2367.0], [20.5, 2414.0], [20.6, 2414.0], [20.7, 2414.0], [20.8, 2414.0], [20.9, 2414.0], [21.0, 2456.0], [21.1, 2456.0], [21.2, 2456.0], [21.3, 2456.0], [21.4, 2456.0], [21.5, 2459.0], [21.6, 2459.0], [21.7, 2459.0], [21.8, 2459.0], [21.9, 2459.0], [22.0, 2465.0], [22.1, 2465.0], [22.2, 2465.0], [22.3, 2465.0], [22.4, 2465.0], [22.5, 2465.0], [22.6, 2465.0], [22.7, 2465.0], [22.8, 2465.0], [22.9, 2465.0], [23.0, 2468.0], [23.1, 2468.0], [23.2, 2468.0], [23.3, 2468.0], [23.4, 2468.0], [23.5, 2474.0], [23.6, 2474.0], [23.7, 2474.0], [23.8, 2474.0], [23.9, 2474.0], [24.0, 2477.0], [24.1, 2477.0], [24.2, 2477.0], [24.3, 2477.0], [24.4, 2477.0], [24.5, 2487.0], [24.6, 2487.0], [24.7, 2487.0], [24.8, 2487.0], [24.9, 2487.0], [25.0, 2490.0], [25.1, 2490.0], [25.2, 2490.0], [25.3, 2490.0], [25.4, 2490.0], [25.5, 2508.0], [25.6, 2508.0], [25.7, 2508.0], [25.8, 2508.0], [25.9, 2508.0], [26.0, 2517.0], [26.1, 2517.0], [26.2, 2517.0], [26.3, 2517.0], [26.4, 2517.0], [26.5, 2544.0], [26.6, 2544.0], [26.7, 2544.0], [26.8, 2544.0], [26.9, 2544.0], [27.0, 2593.0], [27.1, 2593.0], [27.2, 2593.0], [27.3, 2593.0], [27.4, 2593.0], [27.5, 2602.0], [27.6, 2602.0], [27.7, 2602.0], [27.8, 2602.0], [27.9, 2602.0], [28.0, 2618.0], [28.1, 2618.0], [28.2, 2618.0], [28.3, 2618.0], [28.4, 2618.0], [28.5, 2625.0], [28.6, 2625.0], [28.7, 2625.0], [28.8, 2625.0], [28.9, 2625.0], [29.0, 2634.0], [29.1, 2634.0], [29.2, 2634.0], [29.3, 2634.0], [29.4, 2634.0], [29.5, 2651.0], [29.6, 2651.0], [29.7, 2651.0], [29.8, 2651.0], [29.9, 2651.0], [30.0, 2657.0], [30.1, 2657.0], [30.2, 2657.0], [30.3, 2657.0], [30.4, 2657.0], [30.5, 2669.0], [30.6, 2669.0], [30.7, 2669.0], [30.8, 2669.0], [30.9, 2669.0], [31.0, 2674.0], [31.1, 2674.0], [31.2, 2674.0], [31.3, 2674.0], [31.4, 2674.0], [31.5, 2679.0], [31.6, 2679.0], [31.7, 2679.0], [31.8, 2679.0], [31.9, 2679.0], [32.0, 2694.0], [32.1, 2694.0], [32.2, 2694.0], [32.3, 2694.0], [32.4, 2694.0], [32.5, 2696.0], [32.6, 2696.0], [32.7, 2696.0], [32.8, 2696.0], [32.9, 2696.0], [33.0, 2729.0], [33.1, 2729.0], [33.2, 2729.0], [33.3, 2729.0], [33.4, 2729.0], [33.5, 2730.0], [33.6, 2730.0], [33.7, 2730.0], [33.8, 2730.0], [33.9, 2730.0], [34.0, 2741.0], [34.1, 2741.0], [34.2, 2741.0], [34.3, 2741.0], [34.4, 2741.0], [34.5, 2754.0], [34.6, 2754.0], [34.7, 2754.0], [34.8, 2754.0], [34.9, 2754.0], [35.0, 2755.0], [35.1, 2755.0], [35.2, 2755.0], [35.3, 2755.0], [35.4, 2755.0], [35.5, 2764.0], [35.6, 2764.0], [35.7, 2764.0], [35.8, 2764.0], [35.9, 2764.0], [36.0, 2765.0], [36.1, 2765.0], [36.2, 2765.0], [36.3, 2765.0], [36.4, 2765.0], [36.5, 2766.0], [36.6, 2766.0], [36.7, 2766.0], [36.8, 2766.0], [36.9, 2766.0], [37.0, 2789.0], [37.1, 2789.0], [37.2, 2789.0], [37.3, 2789.0], [37.4, 2789.0], [37.5, 2844.0], [37.6, 2844.0], [37.7, 2844.0], [37.8, 2844.0], [37.9, 2844.0], [38.0, 2864.0], [38.1, 2864.0], [38.2, 2864.0], [38.3, 2864.0], [38.4, 2864.0], [38.5, 2867.0], [38.6, 2867.0], [38.7, 2867.0], [38.8, 2867.0], [38.9, 2867.0], [39.0, 2931.0], [39.1, 2931.0], [39.2, 2931.0], [39.3, 2931.0], [39.4, 2931.0], [39.5, 2945.0], [39.6, 2945.0], [39.7, 2945.0], [39.8, 2945.0], [39.9, 2945.0], [40.0, 2962.0], [40.1, 2962.0], [40.2, 2962.0], [40.3, 2962.0], [40.4, 2962.0], [40.5, 2999.0], [40.6, 2999.0], [40.7, 2999.0], [40.8, 2999.0], [40.9, 2999.0], [41.0, 3011.0], [41.1, 3011.0], [41.2, 3011.0], [41.3, 3011.0], [41.4, 3011.0], [41.5, 3034.0], [41.6, 3034.0], [41.7, 3034.0], [41.8, 3034.0], [41.9, 3034.0], [42.0, 3077.0], [42.1, 3077.0], [42.2, 3077.0], [42.3, 3077.0], [42.4, 3077.0], [42.5, 3080.0], [42.6, 3080.0], [42.7, 3080.0], [42.8, 3080.0], [42.9, 3080.0], [43.0, 3132.0], [43.1, 3132.0], [43.2, 3132.0], [43.3, 3132.0], [43.4, 3132.0], [43.5, 3139.0], [43.6, 3139.0], [43.7, 3139.0], [43.8, 3139.0], [43.9, 3139.0], [44.0, 3156.0], [44.1, 3156.0], [44.2, 3156.0], [44.3, 3156.0], [44.4, 3156.0], [44.5, 3175.0], [44.6, 3175.0], [44.7, 3175.0], [44.8, 3175.0], [44.9, 3175.0], [45.0, 3222.0], [45.1, 3222.0], [45.2, 3222.0], [45.3, 3222.0], [45.4, 3222.0], [45.5, 3223.0], [45.6, 3223.0], [45.7, 3223.0], [45.8, 3223.0], [45.9, 3223.0], [46.0, 3302.0], [46.1, 3302.0], [46.2, 3302.0], [46.3, 3302.0], [46.4, 3302.0], [46.5, 3314.0], [46.6, 3314.0], [46.7, 3314.0], [46.8, 3314.0], [46.9, 3314.0], [47.0, 3315.0], [47.1, 3315.0], [47.2, 3315.0], [47.3, 3315.0], [47.4, 3315.0], [47.5, 3338.0], [47.6, 3338.0], [47.7, 3338.0], [47.8, 3338.0], [47.9, 3338.0], [48.0, 3344.0], [48.1, 3344.0], [48.2, 3344.0], [48.3, 3344.0], [48.4, 3344.0], [48.5, 3385.0], [48.6, 3385.0], [48.7, 3385.0], [48.8, 3385.0], [48.9, 3385.0], [49.0, 3393.0], [49.1, 3393.0], [49.2, 3393.0], [49.3, 3393.0], [49.4, 3393.0], [49.5, 3422.0], [49.6, 3422.0], [49.7, 3422.0], [49.8, 3422.0], [49.9, 3422.0], [50.0, 3449.0], [50.1, 3449.0], [50.2, 3449.0], [50.3, 3449.0], [50.4, 3449.0], [50.5, 3482.0], [50.6, 3482.0], [50.7, 3482.0], [50.8, 3482.0], [50.9, 3482.0], [51.0, 3506.0], [51.1, 3506.0], [51.2, 3506.0], [51.3, 3506.0], [51.4, 3506.0], [51.5, 3509.0], [51.6, 3509.0], [51.7, 3509.0], [51.8, 3509.0], [51.9, 3509.0], [52.0, 3512.0], [52.1, 3512.0], [52.2, 3512.0], [52.3, 3512.0], [52.4, 3512.0], [52.5, 3516.0], [52.6, 3516.0], [52.7, 3516.0], [52.8, 3516.0], [52.9, 3516.0], [53.0, 3528.0], [53.1, 3528.0], [53.2, 3528.0], [53.3, 3528.0], [53.4, 3528.0], [53.5, 3570.0], [53.6, 3570.0], [53.7, 3570.0], [53.8, 3570.0], [53.9, 3570.0], [54.0, 3600.0], [54.1, 3600.0], [54.2, 3600.0], [54.3, 3600.0], [54.4, 3600.0], [54.5, 3601.0], [54.6, 3601.0], [54.7, 3601.0], [54.8, 3601.0], [54.9, 3601.0], [55.0, 3637.0], [55.1, 3637.0], [55.2, 3637.0], [55.3, 3637.0], [55.4, 3637.0], [55.5, 3679.0], [55.6, 3679.0], [55.7, 3679.0], [55.8, 3679.0], [55.9, 3679.0], [56.0, 3703.0], [56.1, 3703.0], [56.2, 3703.0], [56.3, 3703.0], [56.4, 3703.0], [56.5, 3707.0], [56.6, 3707.0], [56.7, 3707.0], [56.8, 3707.0], [56.9, 3707.0], [57.0, 3711.0], [57.1, 3711.0], [57.2, 3711.0], [57.3, 3711.0], [57.4, 3711.0], [57.5, 3712.0], [57.6, 3712.0], [57.7, 3712.0], [57.8, 3712.0], [57.9, 3712.0], [58.0, 3714.0], [58.1, 3714.0], [58.2, 3714.0], [58.3, 3714.0], [58.4, 3714.0], [58.5, 3735.0], [58.6, 3735.0], [58.7, 3735.0], [58.8, 3735.0], [58.9, 3735.0], [59.0, 3738.0], [59.1, 3738.0], [59.2, 3738.0], [59.3, 3738.0], [59.4, 3738.0], [59.5, 3764.0], [59.6, 3764.0], [59.7, 3764.0], [59.8, 3764.0], [59.9, 3764.0], [60.0, 3799.0], [60.1, 3799.0], [60.2, 3799.0], [60.3, 3799.0], [60.4, 3799.0], [60.5, 3838.0], [60.6, 3838.0], [60.7, 3838.0], [60.8, 3838.0], [60.9, 3838.0], [61.0, 3849.0], [61.1, 3849.0], [61.2, 3849.0], [61.3, 3849.0], [61.4, 3849.0], [61.5, 3855.0], [61.6, 3855.0], [61.7, 3855.0], [61.8, 3855.0], [61.9, 3855.0], [62.0, 3861.0], [62.1, 3861.0], [62.2, 3861.0], [62.3, 3861.0], [62.4, 3861.0], [62.5, 3868.0], [62.6, 3868.0], [62.7, 3868.0], [62.8, 3868.0], [62.9, 3868.0], [63.0, 3878.0], [63.1, 3878.0], [63.2, 3878.0], [63.3, 3878.0], [63.4, 3878.0], [63.5, 3884.0], [63.6, 3884.0], [63.7, 3884.0], [63.8, 3884.0], [63.9, 3884.0], [64.0, 3890.0], [64.1, 3890.0], [64.2, 3890.0], [64.3, 3890.0], [64.4, 3890.0], [64.5, 3963.0], [64.6, 3963.0], [64.7, 3963.0], [64.8, 3963.0], [64.9, 3963.0], [65.0, 3964.0], [65.1, 3964.0], [65.2, 3964.0], [65.3, 3964.0], [65.4, 3964.0], [65.5, 3983.0], [65.6, 3983.0], [65.7, 3983.0], [65.8, 3983.0], [65.9, 3983.0], [66.0, 4002.0], [66.1, 4002.0], [66.2, 4002.0], [66.3, 4002.0], [66.4, 4002.0], [66.5, 4011.0], [66.6, 4011.0], [66.7, 4011.0], [66.8, 4011.0], [66.9, 4011.0], [67.0, 4047.0], [67.1, 4047.0], [67.2, 4047.0], [67.3, 4047.0], [67.4, 4047.0], [67.5, 4072.0], [67.6, 4072.0], [67.7, 4072.0], [67.8, 4072.0], [67.9, 4072.0], [68.0, 4081.0], [68.1, 4081.0], [68.2, 4081.0], [68.3, 4081.0], [68.4, 4081.0], [68.5, 4100.0], [68.6, 4100.0], [68.7, 4100.0], [68.8, 4100.0], [68.9, 4100.0], [69.0, 4127.0], [69.1, 4127.0], [69.2, 4127.0], [69.3, 4127.0], [69.4, 4127.0], [69.5, 4152.0], [69.6, 4152.0], [69.7, 4152.0], [69.8, 4152.0], [69.9, 4152.0], [70.0, 4176.0], [70.1, 4176.0], [70.2, 4176.0], [70.3, 4176.0], [70.4, 4176.0], [70.5, 4235.0], [70.6, 4235.0], [70.7, 4235.0], [70.8, 4235.0], [70.9, 4235.0], [71.0, 4245.0], [71.1, 4245.0], [71.2, 4245.0], [71.3, 4245.0], [71.4, 4245.0], [71.5, 4254.0], [71.6, 4254.0], [71.7, 4254.0], [71.8, 4254.0], [71.9, 4254.0], [72.0, 4272.0], [72.1, 4272.0], [72.2, 4272.0], [72.3, 4272.0], [72.4, 4272.0], [72.5, 4281.0], [72.6, 4281.0], [72.7, 4281.0], [72.8, 4281.0], [72.9, 4281.0], [73.0, 4321.0], [73.1, 4321.0], [73.2, 4321.0], [73.3, 4321.0], [73.4, 4321.0], [73.5, 4360.0], [73.6, 4360.0], [73.7, 4360.0], [73.8, 4360.0], [73.9, 4360.0], [74.0, 4377.0], [74.1, 4377.0], [74.2, 4377.0], [74.3, 4377.0], [74.4, 4377.0], [74.5, 4399.0], [74.6, 4399.0], [74.7, 4399.0], [74.8, 4399.0], [74.9, 4399.0], [75.0, 4417.0], [75.1, 4417.0], [75.2, 4417.0], [75.3, 4417.0], [75.4, 4417.0], [75.5, 4435.0], [75.6, 4435.0], [75.7, 4435.0], [75.8, 4435.0], [75.9, 4435.0], [76.0, 4447.0], [76.1, 4447.0], [76.2, 4447.0], [76.3, 4447.0], [76.4, 4447.0], [76.5, 4475.0], [76.6, 4475.0], [76.7, 4475.0], [76.8, 4475.0], [76.9, 4475.0], [77.0, 4518.0], [77.1, 4518.0], [77.2, 4518.0], [77.3, 4518.0], [77.4, 4518.0], [77.5, 4519.0], [77.6, 4519.0], [77.7, 4519.0], [77.8, 4519.0], [77.9, 4519.0], [78.0, 4647.0], [78.1, 4647.0], [78.2, 4647.0], [78.3, 4647.0], [78.4, 4647.0], [78.5, 4653.0], [78.6, 4653.0], [78.7, 4653.0], [78.8, 4653.0], [78.9, 4653.0], [79.0, 4681.0], [79.1, 4681.0], [79.2, 4681.0], [79.3, 4681.0], [79.4, 4681.0], [79.5, 4687.0], [79.6, 4687.0], [79.7, 4687.0], [79.8, 4687.0], [79.9, 4687.0], [80.0, 4744.0], [80.1, 4744.0], [80.2, 4744.0], [80.3, 4744.0], [80.4, 4744.0], [80.5, 4772.0], [80.6, 4772.0], [80.7, 4772.0], [80.8, 4772.0], [80.9, 4772.0], [81.0, 4787.0], [81.1, 4787.0], [81.2, 4787.0], [81.3, 4787.0], [81.4, 4787.0], [81.5, 4825.0], [81.6, 4825.0], [81.7, 4825.0], [81.8, 4825.0], [81.9, 4825.0], [82.0, 4869.0], [82.1, 4869.0], [82.2, 4869.0], [82.3, 4869.0], [82.4, 4869.0], [82.5, 4909.0], [82.6, 4909.0], [82.7, 4909.0], [82.8, 4909.0], [82.9, 4909.0], [83.0, 4919.0], [83.1, 4919.0], [83.2, 4919.0], [83.3, 4919.0], [83.4, 4919.0], [83.5, 4930.0], [83.6, 4930.0], [83.7, 4930.0], [83.8, 4930.0], [83.9, 4930.0], [84.0, 4955.0], [84.1, 4955.0], [84.2, 4955.0], [84.3, 4955.0], [84.4, 4955.0], [84.5, 5003.0], [84.6, 5003.0], [84.7, 5003.0], [84.8, 5003.0], [84.9, 5003.0], [85.0, 5051.0], [85.1, 5051.0], [85.2, 5051.0], [85.3, 5051.0], [85.4, 5051.0], [85.5, 5058.0], [85.6, 5058.0], [85.7, 5058.0], [85.8, 5058.0], [85.9, 5058.0], [86.0, 5172.0], [86.1, 5172.0], [86.2, 5172.0], [86.3, 5172.0], [86.4, 5172.0], [86.5, 5209.0], [86.6, 5209.0], [86.7, 5209.0], [86.8, 5209.0], [86.9, 5209.0], [87.0, 5253.0], [87.1, 5253.0], [87.2, 5253.0], [87.3, 5253.0], [87.4, 5253.0], [87.5, 5254.0], [87.6, 5254.0], [87.7, 5254.0], [87.8, 5254.0], [87.9, 5254.0], [88.0, 5278.0], [88.1, 5278.0], [88.2, 5278.0], [88.3, 5278.0], [88.4, 5278.0], [88.5, 5334.0], [88.6, 5334.0], [88.7, 5334.0], [88.8, 5334.0], [88.9, 5334.0], [89.0, 5567.0], [89.1, 5567.0], [89.2, 5567.0], [89.3, 5567.0], [89.4, 5567.0], [89.5, 5674.0], [89.6, 5674.0], [89.7, 5674.0], [89.8, 5674.0], [89.9, 5674.0], [90.0, 5704.0], [90.1, 5704.0], [90.2, 5704.0], [90.3, 5704.0], [90.4, 5704.0], [90.5, 5707.0], [90.6, 5707.0], [90.7, 5707.0], [90.8, 5707.0], [90.9, 5707.0], [91.0, 5726.0], [91.1, 5726.0], [91.2, 5726.0], [91.3, 5726.0], [91.4, 5726.0], [91.5, 5728.0], [91.6, 5728.0], [91.7, 5728.0], [91.8, 5728.0], [91.9, 5728.0], [92.0, 5885.0], [92.1, 5885.0], [92.2, 5885.0], [92.3, 5885.0], [92.4, 5885.0], [92.5, 6114.0], [92.6, 6114.0], [92.7, 6114.0], [92.8, 6114.0], [92.9, 6114.0], [93.0, 6128.0], [93.1, 6128.0], [93.2, 6128.0], [93.3, 6128.0], [93.4, 6128.0], [93.5, 6404.0], [93.6, 6404.0], [93.7, 6404.0], [93.8, 6404.0], [93.9, 6404.0], [94.0, 6448.0], [94.1, 6448.0], [94.2, 6448.0], [94.3, 6448.0], [94.4, 6448.0], [94.5, 6467.0], [94.6, 6467.0], [94.7, 6467.0], [94.8, 6467.0], [94.9, 6467.0], [95.0, 6613.0], [95.1, 6613.0], [95.2, 6613.0], [95.3, 6613.0], [95.4, 6613.0], [95.5, 6968.0], [95.6, 6968.0], [95.7, 6968.0], [95.8, 6968.0], [95.9, 6968.0], [96.0, 7260.0], [96.1, 7260.0], [96.2, 7260.0], [96.3, 7260.0], [96.4, 7260.0], [96.5, 7370.0], [96.6, 7370.0], [96.7, 7370.0], [96.8, 7370.0], [96.9, 7370.0], [97.0, 7383.0], [97.1, 7383.0], [97.2, 7383.0], [97.3, 7383.0], [97.4, 7383.0], [97.5, 7730.0], [97.6, 7730.0], [97.7, 7730.0], [97.8, 7730.0], [97.9, 7730.0], [98.0, 7731.0], [98.1, 7731.0], [98.2, 7731.0], [98.3, 7731.0], [98.4, 7731.0], [98.5, 7982.0], [98.6, 7982.0], [98.7, 7982.0], [98.8, 7982.0], [98.9, 7982.0], [99.0, 7992.0], [99.1, 7992.0], [99.2, 7992.0], [99.3, 7992.0], [99.4, 7992.0], [99.5, 8509.0], [99.6, 8509.0], [99.7, 8509.0], [99.8, 8509.0], [99.9, 8509.0]], "isOverall": false, "label": "GetBooking", "isController": false}, {"data": [[0.0, 266.0], [0.1, 266.0], [0.2, 266.0], [0.3, 266.0], [0.4, 266.0], [0.5, 267.0], [0.6, 267.0], [0.7, 267.0], [0.8, 267.0], [0.9, 267.0], [1.0, 267.0], [1.1, 267.0], [1.2, 267.0], [1.3, 267.0], [1.4, 267.0], [1.5, 267.0], [1.6, 267.0], [1.7, 267.0], [1.8, 267.0], [1.9, 267.0], [2.0, 267.0], [2.1, 267.0], [2.2, 267.0], [2.3, 267.0], [2.4, 267.0], [2.5, 267.0], [2.6, 267.0], [2.7, 267.0], [2.8, 267.0], [2.9, 267.0], [3.0, 267.0], [3.1, 267.0], [3.2, 267.0], [3.3, 267.0], [3.4, 267.0], [3.5, 267.0], [3.6, 267.0], [3.7, 267.0], [3.8, 267.0], [3.9, 267.0], [4.0, 268.0], [4.1, 268.0], [4.2, 268.0], [4.3, 268.0], [4.4, 268.0], [4.5, 268.0], [4.6, 268.0], [4.7, 268.0], [4.8, 268.0], [4.9, 268.0], [5.0, 269.0], [5.1, 269.0], [5.2, 269.0], [5.3, 269.0], [5.4, 269.0], [5.5, 269.0], [5.6, 269.0], [5.7, 269.0], [5.8, 269.0], [5.9, 269.0], [6.0, 269.0], [6.1, 269.0], [6.2, 269.0], [6.3, 269.0], [6.4, 269.0], [6.5, 269.0], [6.6, 269.0], [6.7, 269.0], [6.8, 269.0], [6.9, 269.0], [7.0, 269.0], [7.1, 269.0], [7.2, 269.0], [7.3, 269.0], [7.4, 269.0], [7.5, 269.0], [7.6, 269.0], [7.7, 269.0], [7.8, 269.0], [7.9, 269.0], [8.0, 269.0], [8.1, 269.0], [8.2, 269.0], [8.3, 269.0], [8.4, 269.0], [8.5, 269.0], [8.6, 269.0], [8.7, 269.0], [8.8, 269.0], [8.9, 269.0], [9.0, 269.0], [9.1, 269.0], [9.2, 269.0], [9.3, 269.0], [9.4, 269.0], [9.5, 269.0], [9.6, 269.0], [9.7, 269.0], [9.8, 269.0], [9.9, 269.0], [10.0, 269.0], [10.1, 269.0], [10.2, 269.0], [10.3, 269.0], [10.4, 269.0], [10.5, 270.0], [10.6, 270.0], [10.7, 270.0], [10.8, 270.0], [10.9, 270.0], [11.0, 270.0], [11.1, 270.0], [11.2, 270.0], [11.3, 270.0], [11.4, 270.0], [11.5, 270.0], [11.6, 270.0], [11.7, 270.0], [11.8, 270.0], [11.9, 270.0], [12.0, 270.0], [12.1, 270.0], [12.2, 270.0], [12.3, 270.0], [12.4, 270.0], [12.5, 270.0], [12.6, 270.0], [12.7, 270.0], [12.8, 270.0], [12.9, 270.0], [13.0, 270.0], [13.1, 270.0], [13.2, 270.0], [13.3, 270.0], [13.4, 270.0], [13.5, 270.0], [13.6, 270.0], [13.7, 270.0], [13.8, 270.0], [13.9, 270.0], [14.0, 270.0], [14.1, 270.0], [14.2, 270.0], [14.3, 270.0], [14.4, 270.0], [14.5, 270.0], [14.6, 270.0], [14.7, 270.0], [14.8, 270.0], [14.9, 270.0], [15.0, 270.0], [15.1, 270.0], [15.2, 270.0], [15.3, 270.0], [15.4, 270.0], [15.5, 270.0], [15.6, 270.0], [15.7, 270.0], [15.8, 270.0], [15.9, 270.0], [16.0, 270.0], [16.1, 270.0], [16.2, 270.0], [16.3, 270.0], [16.4, 270.0], [16.5, 270.0], [16.6, 270.0], [16.7, 270.0], [16.8, 270.0], [16.9, 270.0], [17.0, 270.0], [17.1, 270.0], [17.2, 270.0], [17.3, 270.0], [17.4, 270.0], [17.5, 270.0], [17.6, 270.0], [17.7, 270.0], [17.8, 270.0], [17.9, 270.0], [18.0, 270.0], [18.1, 270.0], [18.2, 270.0], [18.3, 270.0], [18.4, 270.0], [18.5, 270.0], [18.6, 270.0], [18.7, 270.0], [18.8, 270.0], [18.9, 270.0], [19.0, 270.0], [19.1, 270.0], [19.2, 270.0], [19.3, 270.0], [19.4, 270.0], [19.5, 270.0], [19.6, 270.0], [19.7, 270.0], [19.8, 270.0], [19.9, 270.0], [20.0, 271.0], [20.1, 271.0], [20.2, 271.0], [20.3, 271.0], [20.4, 271.0], [20.5, 271.0], [20.6, 271.0], [20.7, 271.0], [20.8, 271.0], [20.9, 271.0], [21.0, 271.0], [21.1, 271.0], [21.2, 271.0], [21.3, 271.0], [21.4, 271.0], [21.5, 271.0], [21.6, 271.0], [21.7, 271.0], [21.8, 271.0], [21.9, 271.0], [22.0, 271.0], [22.1, 271.0], [22.2, 271.0], [22.3, 271.0], [22.4, 271.0], [22.5, 271.0], [22.6, 271.0], [22.7, 271.0], [22.8, 271.0], [22.9, 271.0], [23.0, 271.0], [23.1, 271.0], [23.2, 271.0], [23.3, 271.0], [23.4, 271.0], [23.5, 271.0], [23.6, 271.0], [23.7, 271.0], [23.8, 271.0], [23.9, 271.0], [24.0, 271.0], [24.1, 271.0], [24.2, 271.0], [24.3, 271.0], [24.4, 271.0], [24.5, 271.0], [24.6, 271.0], [24.7, 271.0], [24.8, 271.0], [24.9, 271.0], [25.0, 271.0], [25.1, 271.0], [25.2, 271.0], [25.3, 271.0], [25.4, 271.0], [25.5, 272.0], [25.6, 272.0], [25.7, 272.0], [25.8, 272.0], [25.9, 272.0], [26.0, 272.0], [26.1, 272.0], [26.2, 272.0], [26.3, 272.0], [26.4, 272.0], [26.5, 272.0], [26.6, 272.0], [26.7, 272.0], [26.8, 272.0], [26.9, 272.0], [27.0, 272.0], [27.1, 272.0], [27.2, 272.0], [27.3, 272.0], [27.4, 272.0], [27.5, 272.0], [27.6, 272.0], [27.7, 272.0], [27.8, 272.0], [27.9, 272.0], [28.0, 272.0], [28.1, 272.0], [28.2, 272.0], [28.3, 272.0], [28.4, 272.0], [28.5, 273.0], [28.6, 273.0], [28.7, 273.0], [28.8, 273.0], [28.9, 273.0], [29.0, 273.0], [29.1, 273.0], [29.2, 273.0], [29.3, 273.0], [29.4, 273.0], [29.5, 273.0], [29.6, 273.0], [29.7, 273.0], [29.8, 273.0], [29.9, 273.0], [30.0, 273.0], [30.1, 273.0], [30.2, 273.0], [30.3, 273.0], [30.4, 273.0], [30.5, 273.0], [30.6, 273.0], [30.7, 273.0], [30.8, 273.0], [30.9, 273.0], [31.0, 273.0], [31.1, 273.0], [31.2, 273.0], [31.3, 273.0], [31.4, 273.0], [31.5, 273.0], [31.6, 273.0], [31.7, 273.0], [31.8, 273.0], [31.9, 273.0], [32.0, 273.0], [32.1, 273.0], [32.2, 273.0], [32.3, 273.0], [32.4, 273.0], [32.5, 273.0], [32.6, 273.0], [32.7, 273.0], [32.8, 273.0], [32.9, 273.0], [33.0, 273.0], [33.1, 273.0], [33.2, 273.0], [33.3, 273.0], [33.4, 273.0], [33.5, 273.0], [33.6, 273.0], [33.7, 273.0], [33.8, 273.0], [33.9, 273.0], [34.0, 273.0], [34.1, 273.0], [34.2, 273.0], [34.3, 273.0], [34.4, 273.0], [34.5, 274.0], [34.6, 274.0], [34.7, 274.0], [34.8, 274.0], [34.9, 274.0], [35.0, 274.0], [35.1, 274.0], [35.2, 274.0], [35.3, 274.0], [35.4, 274.0], [35.5, 274.0], [35.6, 274.0], [35.7, 274.0], [35.8, 274.0], [35.9, 274.0], [36.0, 274.0], [36.1, 274.0], [36.2, 274.0], [36.3, 274.0], [36.4, 274.0], [36.5, 274.0], [36.6, 274.0], [36.7, 274.0], [36.8, 274.0], [36.9, 274.0], [37.0, 274.0], [37.1, 274.0], [37.2, 274.0], [37.3, 274.0], [37.4, 274.0], [37.5, 274.0], [37.6, 274.0], [37.7, 274.0], [37.8, 274.0], [37.9, 274.0], [38.0, 275.0], [38.1, 275.0], [38.2, 275.0], [38.3, 275.0], [38.4, 275.0], [38.5, 275.0], [38.6, 275.0], [38.7, 275.0], [38.8, 275.0], [38.9, 275.0], [39.0, 275.0], [39.1, 275.0], [39.2, 275.0], [39.3, 275.0], [39.4, 275.0], [39.5, 275.0], [39.6, 275.0], [39.7, 275.0], [39.8, 275.0], [39.9, 275.0], [40.0, 275.0], [40.1, 275.0], [40.2, 275.0], [40.3, 275.0], [40.4, 275.0], [40.5, 275.0], [40.6, 275.0], [40.7, 275.0], [40.8, 275.0], [40.9, 275.0], [41.0, 275.0], [41.1, 275.0], [41.2, 275.0], [41.3, 275.0], [41.4, 275.0], [41.5, 275.0], [41.6, 275.0], [41.7, 275.0], [41.8, 275.0], [41.9, 275.0], [42.0, 275.0], [42.1, 275.0], [42.2, 275.0], [42.3, 275.0], [42.4, 275.0], [42.5, 275.0], [42.6, 275.0], [42.7, 275.0], [42.8, 275.0], [42.9, 275.0], [43.0, 275.0], [43.1, 275.0], [43.2, 275.0], [43.3, 275.0], [43.4, 275.0], [43.5, 275.0], [43.6, 275.0], [43.7, 275.0], [43.8, 275.0], [43.9, 275.0], [44.0, 275.0], [44.1, 275.0], [44.2, 275.0], [44.3, 275.0], [44.4, 275.0], [44.5, 276.0], [44.6, 276.0], [44.7, 276.0], [44.8, 276.0], [44.9, 276.0], [45.0, 276.0], [45.1, 276.0], [45.2, 276.0], [45.3, 276.0], [45.4, 276.0], [45.5, 276.0], [45.6, 276.0], [45.7, 276.0], [45.8, 276.0], [45.9, 276.0], [46.0, 276.0], [46.1, 276.0], [46.2, 276.0], [46.3, 276.0], [46.4, 276.0], [46.5, 276.0], [46.6, 276.0], [46.7, 276.0], [46.8, 276.0], [46.9, 276.0], [47.0, 276.0], [47.1, 276.0], [47.2, 276.0], [47.3, 276.0], [47.4, 276.0], [47.5, 276.0], [47.6, 276.0], [47.7, 276.0], [47.8, 276.0], [47.9, 276.0], [48.0, 276.0], [48.1, 276.0], [48.2, 276.0], [48.3, 276.0], [48.4, 276.0], [48.5, 276.0], [48.6, 276.0], [48.7, 276.0], [48.8, 276.0], [48.9, 276.0], [49.0, 277.0], [49.1, 277.0], [49.2, 277.0], [49.3, 277.0], [49.4, 277.0], [49.5, 277.0], [49.6, 277.0], [49.7, 277.0], [49.8, 277.0], [49.9, 277.0], [50.0, 277.0], [50.1, 277.0], [50.2, 277.0], [50.3, 277.0], [50.4, 277.0], [50.5, 277.0], [50.6, 277.0], [50.7, 277.0], [50.8, 277.0], [50.9, 277.0], [51.0, 277.0], [51.1, 277.0], [51.2, 277.0], [51.3, 277.0], [51.4, 277.0], [51.5, 277.0], [51.6, 277.0], [51.7, 277.0], [51.8, 277.0], [51.9, 277.0], [52.0, 277.0], [52.1, 277.0], [52.2, 277.0], [52.3, 277.0], [52.4, 277.0], [52.5, 277.0], [52.6, 277.0], [52.7, 277.0], [52.8, 277.0], [52.9, 277.0], [53.0, 278.0], [53.1, 278.0], [53.2, 278.0], [53.3, 278.0], [53.4, 278.0], [53.5, 278.0], [53.6, 278.0], [53.7, 278.0], [53.8, 278.0], [53.9, 278.0], [54.0, 278.0], [54.1, 278.0], [54.2, 278.0], [54.3, 278.0], [54.4, 278.0], [54.5, 278.0], [54.6, 278.0], [54.7, 278.0], [54.8, 278.0], [54.9, 278.0], [55.0, 278.0], [55.1, 278.0], [55.2, 278.0], [55.3, 278.0], [55.4, 278.0], [55.5, 278.0], [55.6, 278.0], [55.7, 278.0], [55.8, 278.0], [55.9, 278.0], [56.0, 278.0], [56.1, 278.0], [56.2, 278.0], [56.3, 278.0], [56.4, 278.0], [56.5, 278.0], [56.6, 278.0], [56.7, 278.0], [56.8, 278.0], [56.9, 278.0], [57.0, 278.0], [57.1, 278.0], [57.2, 278.0], [57.3, 278.0], [57.4, 278.0], [57.5, 279.0], [57.6, 279.0], [57.7, 279.0], [57.8, 279.0], [57.9, 279.0], [58.0, 279.0], [58.1, 279.0], [58.2, 279.0], [58.3, 279.0], [58.4, 279.0], [58.5, 279.0], [58.6, 279.0], [58.7, 279.0], [58.8, 279.0], [58.9, 279.0], [59.0, 279.0], [59.1, 279.0], [59.2, 279.0], [59.3, 279.0], [59.4, 279.0], [59.5, 279.0], [59.6, 279.0], [59.7, 279.0], [59.8, 279.0], [59.9, 279.0], [60.0, 279.0], [60.1, 279.0], [60.2, 279.0], [60.3, 279.0], [60.4, 279.0], [60.5, 279.0], [60.6, 279.0], [60.7, 279.0], [60.8, 279.0], [60.9, 279.0], [61.0, 279.0], [61.1, 279.0], [61.2, 279.0], [61.3, 279.0], [61.4, 279.0], [61.5, 279.0], [61.6, 279.0], [61.7, 279.0], [61.8, 279.0], [61.9, 279.0], [62.0, 279.0], [62.1, 279.0], [62.2, 279.0], [62.3, 279.0], [62.4, 279.0], [62.5, 280.0], [62.6, 280.0], [62.7, 280.0], [62.8, 280.0], [62.9, 280.0], [63.0, 280.0], [63.1, 280.0], [63.2, 280.0], [63.3, 280.0], [63.4, 280.0], [63.5, 280.0], [63.6, 280.0], [63.7, 280.0], [63.8, 280.0], [63.9, 280.0], [64.0, 280.0], [64.1, 280.0], [64.2, 280.0], [64.3, 280.0], [64.4, 280.0], [64.5, 282.0], [64.6, 282.0], [64.7, 282.0], [64.8, 282.0], [64.9, 282.0], [65.0, 282.0], [65.1, 282.0], [65.2, 282.0], [65.3, 282.0], [65.4, 282.0], [65.5, 282.0], [65.6, 282.0], [65.7, 282.0], [65.8, 282.0], [65.9, 282.0], [66.0, 284.0], [66.1, 284.0], [66.2, 284.0], [66.3, 284.0], [66.4, 284.0], [66.5, 284.0], [66.6, 284.0], [66.7, 284.0], [66.8, 284.0], [66.9, 284.0], [67.0, 285.0], [67.1, 285.0], [67.2, 285.0], [67.3, 285.0], [67.4, 285.0], [67.5, 285.0], [67.6, 285.0], [67.7, 285.0], [67.8, 285.0], [67.9, 285.0], [68.0, 285.0], [68.1, 285.0], [68.2, 285.0], [68.3, 285.0], [68.4, 285.0], [68.5, 285.0], [68.6, 285.0], [68.7, 285.0], [68.8, 285.0], [68.9, 285.0], [69.0, 286.0], [69.1, 286.0], [69.2, 286.0], [69.3, 286.0], [69.4, 286.0], [69.5, 286.0], [69.6, 286.0], [69.7, 286.0], [69.8, 286.0], [69.9, 286.0], [70.0, 287.0], [70.1, 287.0], [70.2, 287.0], [70.3, 287.0], [70.4, 287.0], [70.5, 288.0], [70.6, 288.0], [70.7, 288.0], [70.8, 288.0], [70.9, 288.0], [71.0, 289.0], [71.1, 289.0], [71.2, 289.0], [71.3, 289.0], [71.4, 289.0], [71.5, 289.0], [71.6, 289.0], [71.7, 289.0], [71.8, 289.0], [71.9, 289.0], [72.0, 289.0], [72.1, 289.0], [72.2, 289.0], [72.3, 289.0], [72.4, 289.0], [72.5, 290.0], [72.6, 290.0], [72.7, 290.0], [72.8, 290.0], [72.9, 290.0], [73.0, 290.0], [73.1, 290.0], [73.2, 290.0], [73.3, 290.0], [73.4, 290.0], [73.5, 290.0], [73.6, 290.0], [73.7, 290.0], [73.8, 290.0], [73.9, 290.0], [74.0, 290.0], [74.1, 290.0], [74.2, 290.0], [74.3, 290.0], [74.4, 290.0], [74.5, 290.0], [74.6, 290.0], [74.7, 290.0], [74.8, 290.0], [74.9, 290.0], [75.0, 291.0], [75.1, 291.0], [75.2, 291.0], [75.3, 291.0], [75.4, 291.0], [75.5, 293.0], [75.6, 293.0], [75.7, 293.0], [75.8, 293.0], [75.9, 293.0], [76.0, 293.0], [76.1, 293.0], [76.2, 293.0], [76.3, 293.0], [76.4, 293.0], [76.5, 293.0], [76.6, 293.0], [76.7, 293.0], [76.8, 293.0], [76.9, 293.0], [77.0, 293.0], [77.1, 293.0], [77.2, 293.0], [77.3, 293.0], [77.4, 293.0], [77.5, 293.0], [77.6, 293.0], [77.7, 293.0], [77.8, 293.0], [77.9, 293.0], [78.0, 293.0], [78.1, 293.0], [78.2, 293.0], [78.3, 293.0], [78.4, 293.0], [78.5, 294.0], [78.6, 294.0], [78.7, 294.0], [78.8, 294.0], [78.9, 294.0], [79.0, 294.0], [79.1, 294.0], [79.2, 294.0], [79.3, 294.0], [79.4, 294.0], [79.5, 294.0], [79.6, 294.0], [79.7, 294.0], [79.8, 294.0], [79.9, 294.0], [80.0, 294.0], [80.1, 294.0], [80.2, 294.0], [80.3, 294.0], [80.4, 294.0], [80.5, 295.0], [80.6, 295.0], [80.7, 295.0], [80.8, 295.0], [80.9, 295.0], [81.0, 295.0], [81.1, 295.0], [81.2, 295.0], [81.3, 295.0], [81.4, 295.0], [81.5, 295.0], [81.6, 295.0], [81.7, 295.0], [81.8, 295.0], [81.9, 295.0], [82.0, 295.0], [82.1, 295.0], [82.2, 295.0], [82.3, 295.0], [82.4, 295.0], [82.5, 295.0], [82.6, 295.0], [82.7, 295.0], [82.8, 295.0], [82.9, 295.0], [83.0, 295.0], [83.1, 295.0], [83.2, 295.0], [83.3, 295.0], [83.4, 295.0], [83.5, 295.0], [83.6, 295.0], [83.7, 295.0], [83.8, 295.0], [83.9, 295.0], [84.0, 296.0], [84.1, 296.0], [84.2, 296.0], [84.3, 296.0], [84.4, 296.0], [84.5, 296.0], [84.6, 296.0], [84.7, 296.0], [84.8, 296.0], [84.9, 296.0], [85.0, 296.0], [85.1, 296.0], [85.2, 296.0], [85.3, 296.0], [85.4, 296.0], [85.5, 296.0], [85.6, 296.0], [85.7, 296.0], [85.8, 296.0], [85.9, 296.0], [86.0, 297.0], [86.1, 297.0], [86.2, 297.0], [86.3, 297.0], [86.4, 297.0], [86.5, 297.0], [86.6, 297.0], [86.7, 297.0], [86.8, 297.0], [86.9, 297.0], [87.0, 297.0], [87.1, 297.0], [87.2, 297.0], [87.3, 297.0], [87.4, 297.0], [87.5, 297.0], [87.6, 297.0], [87.7, 297.0], [87.8, 297.0], [87.9, 297.0], [88.0, 297.0], [88.1, 297.0], [88.2, 297.0], [88.3, 297.0], [88.4, 297.0], [88.5, 298.0], [88.6, 298.0], [88.7, 298.0], [88.8, 298.0], [88.9, 298.0], [89.0, 298.0], [89.1, 298.0], [89.2, 298.0], [89.3, 298.0], [89.4, 298.0], [89.5, 298.0], [89.6, 298.0], [89.7, 298.0], [89.8, 298.0], [89.9, 298.0], [90.0, 298.0], [90.1, 298.0], [90.2, 298.0], [90.3, 298.0], [90.4, 298.0], [90.5, 299.0], [90.6, 299.0], [90.7, 299.0], [90.8, 299.0], [90.9, 299.0], [91.0, 299.0], [91.1, 299.0], [91.2, 299.0], [91.3, 299.0], [91.4, 299.0], [91.5, 301.0], [91.6, 301.0], [91.7, 301.0], [91.8, 301.0], [91.9, 301.0], [92.0, 303.0], [92.1, 303.0], [92.2, 303.0], [92.3, 303.0], [92.4, 303.0], [92.5, 303.0], [92.6, 303.0], [92.7, 303.0], [92.8, 303.0], [92.9, 303.0], [93.0, 304.0], [93.1, 304.0], [93.2, 304.0], [93.3, 304.0], [93.4, 304.0], [93.5, 306.0], [93.6, 306.0], [93.7, 306.0], [93.8, 306.0], [93.9, 306.0], [94.0, 306.0], [94.1, 306.0], [94.2, 306.0], [94.3, 306.0], [94.4, 306.0], [94.5, 308.0], [94.6, 308.0], [94.7, 308.0], [94.8, 308.0], [94.9, 308.0], [95.0, 330.0], [95.1, 330.0], [95.2, 330.0], [95.3, 330.0], [95.4, 330.0], [95.5, 349.0], [95.6, 349.0], [95.7, 349.0], [95.8, 349.0], [95.9, 349.0], [96.0, 929.0], [96.1, 929.0], [96.2, 929.0], [96.3, 929.0], [96.4, 929.0], [96.5, 1003.0], [96.6, 1003.0], [96.7, 1003.0], [96.8, 1003.0], [96.9, 1003.0], [97.0, 1102.0], [97.1, 1102.0], [97.2, 1102.0], [97.3, 1102.0], [97.4, 1102.0], [97.5, 1105.0], [97.6, 1105.0], [97.7, 1105.0], [97.8, 1105.0], [97.9, 1105.0], [98.0, 1113.0], [98.1, 1113.0], [98.2, 1113.0], [98.3, 1113.0], [98.4, 1113.0], [98.5, 1146.0], [98.6, 1146.0], [98.7, 1146.0], [98.8, 1146.0], [98.9, 1146.0], [99.0, 1184.0], [99.1, 1184.0], [99.2, 1184.0], [99.3, 1184.0], [99.4, 1184.0], [99.5, 1961.0], [99.6, 1961.0], [99.7, 1961.0], [99.8, 1961.0], [99.9, 1961.0]], "isOverall": false, "label": "CreateBooking", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 183.0, "series": [{"data": [[1100.0, 5.0], [1200.0, 4.0], [1300.0, 8.0], [1400.0, 3.0], [1600.0, 1.0], [1800.0, 8.0], [1900.0, 3.0], [2000.0, 2.0], [2100.0, 3.0], [2200.0, 1.0], [2300.0, 2.0], [2400.0, 2.0], [2500.0, 3.0], [2600.0, 2.0], [2700.0, 3.0], [2800.0, 3.0], [2900.0, 5.0], [3000.0, 2.0], [3100.0, 3.0], [3200.0, 3.0], [3400.0, 2.0], [3500.0, 5.0], [3600.0, 1.0], [3700.0, 3.0], [3800.0, 5.0], [4100.0, 1.0], [4300.0, 6.0], [4600.0, 1.0], [4400.0, 1.0], [4700.0, 2.0], [4800.0, 3.0], [4900.0, 3.0], [5000.0, 1.0], [5300.0, 2.0], [5200.0, 1.0], [5600.0, 3.0], [5500.0, 2.0], [5400.0, 2.0], [5700.0, 2.0], [5800.0, 1.0], [6000.0, 2.0], [6100.0, 1.0], [5900.0, 2.0], [6300.0, 6.0], [6200.0, 1.0], [6600.0, 2.0], [6500.0, 3.0], [6400.0, 2.0], [6800.0, 1.0], [6700.0, 1.0], [7100.0, 1.0], [7000.0, 1.0], [7400.0, 14.0], [7200.0, 1.0], [7300.0, 3.0], [7500.0, 1.0], [7600.0, 2.0], [7700.0, 2.0], [7900.0, 2.0], [8000.0, 2.0], [8500.0, 3.0], [8600.0, 4.0], [8400.0, 2.0], [8300.0, 1.0], [8900.0, 1.0], [9200.0, 2.0], [8800.0, 2.0], [9600.0, 1.0], [9500.0, 3.0], [9700.0, 1.0], [9800.0, 2.0], [10100.0, 1.0], [10500.0, 1.0], [11100.0, 2.0], [11000.0, 1.0], [11400.0, 2.0], [11700.0, 2.0], [11800.0, 1.0], [12100.0, 1.0], [12200.0, 1.0], [13400.0, 1.0], [14900.0, 1.0], [15700.0, 1.0]], "isOverall": false, "label": "auth", "isController": false}, {"data": [[900.0, 1.0], [1100.0, 2.0], [1200.0, 1.0], [1400.0, 5.0], [1500.0, 1.0], [1600.0, 3.0], [1700.0, 3.0], [1800.0, 3.0], [1900.0, 4.0], [2000.0, 5.0], [2100.0, 5.0], [2200.0, 3.0], [2300.0, 5.0], [2400.0, 10.0], [2500.0, 4.0], [2600.0, 11.0], [2700.0, 9.0], [2800.0, 3.0], [2900.0, 4.0], [3000.0, 4.0], [3100.0, 4.0], [3300.0, 7.0], [3200.0, 2.0], [3400.0, 3.0], [3500.0, 6.0], [3600.0, 4.0], [3700.0, 9.0], [3800.0, 8.0], [3900.0, 3.0], [4000.0, 5.0], [4100.0, 4.0], [4300.0, 4.0], [4200.0, 5.0], [4400.0, 4.0], [4500.0, 2.0], [4600.0, 4.0], [4700.0, 3.0], [4800.0, 2.0], [4900.0, 4.0], [5000.0, 3.0], [5100.0, 1.0], [5200.0, 4.0], [5300.0, 1.0], [5600.0, 1.0], [5500.0, 1.0], [5700.0, 4.0], [5800.0, 1.0], [6100.0, 2.0], [6400.0, 3.0], [6600.0, 1.0], [6900.0, 1.0], [7200.0, 1.0], [7300.0, 2.0], [7700.0, 2.0], [7900.0, 2.0], [8500.0, 1.0]], "isOverall": false, "label": "GetBooking", "isController": false}, {"data": [[1100.0, 5.0], [300.0, 9.0], [200.0, 183.0], [900.0, 1.0], [1900.0, 1.0], [1000.0, 1.0]], "isOverall": false, "label": "CreateBooking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 15700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 36.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 372.0, "series": [{"data": [[0.0, 192.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 36.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 372.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 128.7333333333332, "minX": 1.70935554E12, "maxY": 128.7333333333332, "series": [{"data": [[1.70935554E12, 128.7333333333332]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70935554E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 266.0, "minX": 1.0, "maxY": 15701.0, "series": [{"data": [[33.0, 14913.0], [37.0, 13469.0], [82.0, 7422.0], [104.0, 5740.0], [110.0, 4325.0], [7.0, 8585.0], [135.0, 3790.0], [143.0, 7704.0], [151.0, 12113.0], [150.0, 4326.0], [145.0, 11963.0], [159.0, 3505.0], [158.0, 8414.4], [156.0, 3889.0], [154.0, 3188.0], [167.0, 7485.0], [162.0, 7429.4], [175.0, 3333.2], [173.0, 4941.999999999999], [172.0, 5899.454545454546], [170.0, 8988.999999999998], [169.0, 8133.5], [176.0, 1338.3333333333333], [177.0, 3600.6], [178.0, 4759.0], [180.0, 2612.3333333333335], [189.0, 1303.0], [191.0, 3456.6666666666665], [190.0, 2365.5], [186.0, 9978.5], [184.0, 5242.0], [195.0, 6811.454545454546], [196.0, 5328.0], [197.0, 4715.666666666667], [198.0, 3655.8333333333335], [199.0, 4586.4], [194.0, 2998.0], [193.0, 3580.5], [192.0, 6280.6875], [200.0, 1833.9999999999998], [19.0, 15701.0], [31.0, 9509.0]], "isOverall": false, "label": "auth", "isController": false}, {"data": [[175.61999999999992, 5429.524999999999]], "isOverall": false, "label": "auth-Aggregated", "isController": false}, {"data": [[3.0, 4467.0], [4.0, 3838.0], [5.0, 2730.0], [6.0, 5707.0], [10.0, 8509.0], [19.0, 5094.333333333333], [22.0, 4785.111111111111], [23.0, 6612.666666666667], [30.0, 2147.0], [33.0, 7383.0], [32.0, 2696.0], [35.0, 4345.666666666667], [34.0, 6150.0], [37.0, 3580.0], [36.0, 2669.0], [38.0, 2741.0], [47.0, 5824.5], [55.0, 4765.666666666667], [54.0, 2844.0], [57.0, 3560.5], [56.0, 3577.5], [61.0, 3447.0], [63.0, 2809.0], [62.0, 6613.0], [65.0, 3161.3333333333335], [64.0, 2477.0], [71.0, 1634.0], [70.0, 6467.0], [69.0, 6448.0], [75.0, 4353.75], [74.0, 4825.0], [79.0, 3011.6], [78.0, 3654.5], [77.0, 3852.0], [82.0, 4272.0], [81.0, 6114.0], [80.0, 3711.0], [86.0, 1657.0], [90.0, 5885.0], [89.0, 3714.0], [93.0, 3600.0], [92.0, 3516.0], [99.0, 2328.0], [96.0, 4095.5000000000005], [103.0, 3849.0], [102.0, 3738.0], [101.0, 2682.5], [107.0, 3156.0], [104.0, 3855.0], [111.0, 5278.0], [110.0, 3622.0], [109.0, 4431.0], [114.0, 5254.0], [112.0, 4081.0], [116.0, 4610.0], [122.0, 5058.0], [120.0, 3320.0], [124.0, 1136.0], [135.0, 2324.0], [132.0, 2796.0], [131.0, 3581.3333333333335], [130.0, 3503.6666666666665], [143.0, 2852.6666666666665], [139.0, 3630.0], [137.0, 4475.666666666667], [151.0, 3870.3333333333335], [150.0, 4519.0], [149.0, 2055.0], [145.0, 2419.5], [144.0, 3703.0], [159.0, 3964.0], [158.0, 2759.2], [154.0, 3076.8], [153.0, 4447.0], [165.0, 2517.0], [164.0, 3040.0], [161.0, 4152.0], [175.0, 3393.0], [173.0, 3449.0], [172.0, 3482.0], [171.0, 3601.0], [170.0, 3689.5], [169.0, 2739.25], [168.0, 2414.0], [182.0, 2128.0], [177.0, 3318.3333333333335], [191.0, 2465.0], [187.0, 1939.5], [186.0, 2651.0], [185.0, 2291.0], [184.0, 2781.4], [195.0, 910.0], [199.0, 1472.6666666666667], [198.0, 1752.3333333333333], [197.0, 1907.5], [194.0, 2166.0], [193.0, 2198.0], [192.0, 2276.0], [1.0, 4399.0]], "isOverall": false, "label": "GetBooking", "isController": false}, {"data": [[109.90499999999996, 3604.0099999999993]], "isOverall": false, "label": "GetBooking-Aggregated", "isController": false}, {"data": [[2.0, 267.0], [3.0, 267.0], [4.0, 269.0], [5.0, 267.0], [6.0, 273.0], [7.0, 271.0], [8.0, 280.0], [10.0, 272.5], [15.0, 274.0], [17.0, 270.5], [18.0, 277.0], [19.0, 276.0], [21.0, 272.0], [22.0, 271.0], [23.0, 278.0], [24.0, 277.0], [25.0, 278.0], [27.0, 273.0], [30.0, 319.3333333333333], [31.0, 273.0], [33.0, 270.0], [32.0, 278.0], [35.0, 272.0], [34.0, 278.0], [37.0, 273.0], [36.0, 269.0], [39.0, 274.0], [38.0, 277.0], [40.0, 279.0], [43.0, 276.0], [42.0, 277.0], [45.0, 278.0], [44.0, 274.0], [47.0, 272.0], [46.0, 274.0], [49.0, 276.0], [48.0, 274.0], [51.0, 275.0], [50.0, 277.0], [53.0, 279.0], [55.0, 273.0], [54.0, 267.0], [57.0, 275.0], [56.0, 275.0], [59.0, 271.0], [58.0, 276.0], [61.0, 271.5], [63.0, 273.0], [62.0, 280.0], [66.0, 270.0], [65.0, 282.0], [64.0, 275.0], [71.0, 267.0], [70.0, 276.0], [69.0, 270.0], [68.0, 275.0], [75.0, 270.0], [74.0, 274.0], [72.0, 272.0], [79.0, 269.0], [78.0, 274.0], [77.0, 278.0], [76.0, 276.0], [82.0, 266.0], [81.0, 279.0], [80.0, 272.0], [86.0, 275.0], [85.0, 277.0], [84.0, 270.0], [91.0, 304.0], [90.0, 270.0], [89.0, 270.0], [88.0, 269.5], [95.0, 279.0], [94.0, 272.0], [93.0, 275.0], [92.0, 271.0], [99.0, 270.0], [98.0, 275.0], [97.0, 270.0], [96.0, 270.0], [103.0, 269.0], [102.0, 269.0], [101.0, 271.0], [100.0, 272.0], [107.0, 269.0], [106.0, 270.0], [105.0, 269.0], [104.0, 275.0], [111.0, 273.0], [110.0, 267.0], [109.0, 270.0], [108.0, 268.0], [114.0, 277.5], [112.0, 929.0], [119.0, 270.0], [118.0, 269.0], [117.0, 269.0], [116.0, 273.5], [123.0, 277.0], [122.0, 271.0], [121.0, 270.0], [120.0, 273.0], [126.0, 275.0], [125.0, 273.0], [124.0, 273.0], [135.0, 297.0], [134.0, 290.0], [133.0, 297.0], [132.0, 289.0], [131.0, 278.0], [130.0, 277.5], [128.0, 275.0], [143.0, 292.0], [140.0, 282.0], [139.0, 286.5], [137.0, 279.0], [136.0, 285.0], [151.0, 299.0], [150.0, 295.0], [149.0, 1146.0], [148.0, 1105.0], [147.0, 301.5], [145.0, 294.0], [144.0, 299.0], [159.0, 285.0], [158.0, 739.5], [156.0, 280.0], [155.0, 285.0], [154.0, 295.0], [153.0, 1113.0], [152.0, 303.0], [167.0, 294.0], [166.0, 301.0], [165.0, 294.0], [164.0, 282.0], [163.0, 285.0], [162.0, 298.0], [161.0, 286.0], [160.0, 1961.0], [175.0, 298.0], [174.0, 295.0], [173.0, 293.0], [172.0, 293.0], [171.0, 306.0], [170.0, 298.0], [169.0, 288.0], [168.0, 290.0], [183.0, 1003.0], [182.0, 297.0], [181.0, 289.0], [180.0, 291.0], [179.0, 295.0], [178.0, 296.0], [177.0, 295.0], [176.0, 296.0], [191.0, 295.0], [190.0, 1102.0], [189.0, 302.0], [187.0, 293.0], [186.0, 294.0], [185.0, 293.0], [184.0, 297.0], [199.0, 293.0], [198.0, 284.0], [197.0, 296.0], [196.0, 290.0], [195.0, 298.0], [194.0, 293.0], [193.0, 290.0], [192.0, 290.0], [200.0, 275.0], [1.0, 268.0]], "isOverall": false, "label": "CreateBooking", "isController": false}, {"data": [[100.67500000000001, 316.86999999999983]], "isOverall": false, "label": "CreateBooking-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2813.3333333333335, "minX": 1.70935554E12, "maxY": 198291.18333333332, "series": [{"data": [[1.70935554E12, 198291.18333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70935554E12, 2813.3333333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70935554E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 316.86999999999983, "minX": 1.70935554E12, "maxY": 5429.524999999999, "series": [{"data": [[1.70935554E12, 5429.524999999999]], "isOverall": false, "label": "auth", "isController": false}, {"data": [[1.70935554E12, 3604.0099999999993]], "isOverall": false, "label": "GetBooking", "isController": false}, {"data": [[1.70935554E12, 316.86999999999983]], "isOverall": false, "label": "CreateBooking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70935554E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 316.8250000000002, "minX": 1.70935554E12, "maxY": 5422.404999999995, "series": [{"data": [[1.70935554E12, 5422.404999999995]], "isOverall": false, "label": "auth", "isController": false}, {"data": [[1.70935554E12, 1849.7299999999996]], "isOverall": false, "label": "GetBooking", "isController": false}, {"data": [[1.70935554E12, 316.8250000000002]], "isOverall": false, "label": "CreateBooking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70935554E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70935554E12, "maxY": 5008.235000000002, "series": [{"data": [[1.70935554E12, 5008.235000000002]], "isOverall": false, "label": "auth", "isController": false}, {"data": [[1.70935554E12, 0.0]], "isOverall": false, "label": "GetBooking", "isController": false}, {"data": [[1.70935554E12, 0.0]], "isOverall": false, "label": "CreateBooking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70935554E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 266.0, "minX": 1.70935554E12, "maxY": 15701.0, "series": [{"data": [[1.70935554E12, 15701.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70935554E12, 266.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70935554E12, 7432.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70935554E12, 11867.470000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70935554E12, 2597.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.70935554E12, 8654.399999999996]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70935554E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 267.0, "minX": 1.0, "maxY": 4733.0, "series": [{"data": [[33.0, 1915.0], [2.0, 2336.0], [38.0, 1885.0], [3.0, 267.0], [53.0, 2799.0], [59.0, 279.0], [1.0, 271.0], [70.0, 2934.5], [75.0, 4733.0], [82.0, 1645.5], [5.0, 2730.0], [88.0, 2676.5], [89.0, 1136.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 89.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 267.0, "minX": 1.0, "maxY": 4733.0, "series": [{"data": [[33.0, 1092.0], [2.0, 1098.5], [38.0, 1885.0], [3.0, 267.0], [53.0, 1554.0], [59.0, 279.0], [1.0, 271.0], [70.0, 2934.5], [75.0, 4733.0], [82.0, 582.0], [5.0, 1102.0], [88.0, 1180.5], [89.0, 593.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 89.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.70935554E12, "maxY": 10.0, "series": [{"data": [[1.70935554E12, 10.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70935554E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.70935554E12, "maxY": 10.0, "series": [{"data": [[1.70935554E12, 10.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70935554E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.3333333333333335, "minX": 1.70935554E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.70935554E12, 3.3333333333333335]], "isOverall": false, "label": "GetBooking-success", "isController": false}, {"data": [[1.70935554E12, 3.3333333333333335]], "isOverall": false, "label": "CreateBooking-success", "isController": false}, {"data": [[1.70935554E12, 3.3333333333333335]], "isOverall": false, "label": "auth-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70935554E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.70935554E12, "maxY": 10.0, "series": [{"data": [[1.70935554E12, 10.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70935554E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

