/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 266.0, "minX": 0.0, "maxY": 3693.0, "series": [{"data": [[0.0, 1076.0], [0.1, 1076.0], [0.2, 1078.0], [0.3, 1078.0], [0.4, 1081.0], [0.5, 1081.0], [0.6, 1081.0], [0.7, 1081.0], [0.8, 1081.0], [0.9, 1081.0], [1.0, 1082.0], [1.1, 1082.0], [1.2, 1083.0], [1.3, 1083.0], [1.4, 1083.0], [1.5, 1083.0], [1.6, 1083.0], [1.7, 1083.0], [1.8, 1085.0], [1.9, 1085.0], [2.0, 1085.0], [2.1, 1085.0], [2.2, 1085.0], [2.3, 1085.0], [2.4, 1085.0], [2.5, 1085.0], [2.6, 1085.0], [2.7, 1085.0], [2.8, 1086.0], [2.9, 1086.0], [3.0, 1086.0], [3.1, 1086.0], [3.2, 1086.0], [3.3, 1086.0], [3.4, 1086.0], [3.5, 1086.0], [3.6, 1087.0], [3.7, 1087.0], [3.8, 1087.0], [3.9, 1087.0], [4.0, 1088.0], [4.1, 1088.0], [4.2, 1088.0], [4.3, 1088.0], [4.4, 1089.0], [4.5, 1089.0], [4.6, 1089.0], [4.7, 1089.0], [4.8, 1090.0], [4.9, 1090.0], [5.0, 1090.0], [5.1, 1090.0], [5.2, 1090.0], [5.3, 1090.0], [5.4, 1091.0], [5.5, 1091.0], [5.6, 1091.0], [5.7, 1091.0], [5.8, 1091.0], [5.9, 1091.0], [6.0, 1091.0], [6.1, 1091.0], [6.2, 1091.0], [6.3, 1091.0], [6.4, 1092.0], [6.5, 1092.0], [6.6, 1092.0], [6.7, 1092.0], [6.8, 1092.0], [6.9, 1092.0], [7.0, 1092.0], [7.1, 1092.0], [7.2, 1092.0], [7.3, 1092.0], [7.4, 1093.0], [7.5, 1093.0], [7.6, 1093.0], [7.7, 1093.0], [7.8, 1094.0], [7.9, 1094.0], [8.0, 1095.0], [8.1, 1095.0], [8.2, 1095.0], [8.3, 1095.0], [8.4, 1095.0], [8.5, 1095.0], [8.6, 1095.0], [8.7, 1095.0], [8.8, 1096.0], [8.9, 1096.0], [9.0, 1096.0], [9.1, 1096.0], [9.2, 1096.0], [9.3, 1097.0], [9.4, 1097.0], [9.5, 1097.0], [9.6, 1097.0], [9.7, 1097.0], [9.8, 1098.0], [9.9, 1098.0], [10.0, 1098.0], [10.1, 1098.0], [10.2, 1098.0], [10.3, 1098.0], [10.4, 1098.0], [10.5, 1098.0], [10.6, 1098.0], [10.7, 1099.0], [10.8, 1099.0], [10.9, 1099.0], [11.0, 1099.0], [11.1, 1100.0], [11.2, 1100.0], [11.3, 1100.0], [11.4, 1100.0], [11.5, 1100.0], [11.6, 1100.0], [11.7, 1101.0], [11.8, 1102.0], [11.9, 1102.0], [12.0, 1102.0], [12.1, 1102.0], [12.2, 1102.0], [12.3, 1102.0], [12.4, 1103.0], [12.5, 1103.0], [12.6, 1104.0], [12.7, 1104.0], [12.8, 1104.0], [12.9, 1104.0], [13.0, 1104.0], [13.1, 1104.0], [13.2, 1104.0], [13.3, 1104.0], [13.4, 1105.0], [13.5, 1105.0], [13.6, 1105.0], [13.7, 1105.0], [13.8, 1105.0], [13.9, 1105.0], [14.0, 1105.0], [14.1, 1105.0], [14.2, 1105.0], [14.3, 1105.0], [14.4, 1106.0], [14.5, 1106.0], [14.6, 1106.0], [14.7, 1106.0], [14.8, 1107.0], [14.9, 1107.0], [15.0, 1107.0], [15.1, 1107.0], [15.2, 1107.0], [15.3, 1107.0], [15.4, 1108.0], [15.5, 1108.0], [15.6, 1109.0], [15.7, 1109.0], [15.8, 1109.0], [15.9, 1109.0], [16.0, 1110.0], [16.1, 1110.0], [16.2, 1110.0], [16.3, 1110.0], [16.4, 1113.0], [16.5, 1113.0], [16.6, 1113.0], [16.7, 1113.0], [16.8, 1114.0], [16.9, 1114.0], [17.0, 1114.0], [17.1, 1114.0], [17.2, 1116.0], [17.3, 1116.0], [17.4, 1118.0], [17.5, 1118.0], [17.6, 1118.0], [17.7, 1118.0], [17.8, 1118.0], [17.9, 1118.0], [18.0, 1119.0], [18.1, 1119.0], [18.2, 1120.0], [18.3, 1120.0], [18.4, 1120.0], [18.5, 1120.0], [18.6, 1121.0], [18.7, 1121.0], [18.8, 1124.0], [18.9, 1124.0], [19.0, 1132.0], [19.1, 1132.0], [19.2, 1135.0], [19.3, 1135.0], [19.4, 1136.0], [19.5, 1136.0], [19.6, 1140.0], [19.7, 1140.0], [19.8, 1142.0], [19.9, 1142.0], [20.0, 1147.0], [20.1, 1147.0], [20.2, 1149.0], [20.3, 1149.0], [20.4, 1149.0], [20.5, 1149.0], [20.6, 1149.0], [20.7, 1149.0], [20.8, 1159.0], [20.9, 1159.0], [21.0, 1160.0], [21.1, 1160.0], [21.2, 1162.0], [21.3, 1162.0], [21.4, 1164.0], [21.5, 1164.0], [21.6, 1165.0], [21.7, 1165.0], [21.8, 1166.0], [21.9, 1166.0], [22.0, 1171.0], [22.1, 1171.0], [22.2, 1174.0], [22.3, 1174.0], [22.4, 1174.0], [22.5, 1174.0], [22.6, 1174.0], [22.7, 1174.0], [22.8, 1179.0], [22.9, 1179.0], [23.0, 1180.0], [23.1, 1180.0], [23.2, 1186.0], [23.3, 1186.0], [23.4, 1189.0], [23.5, 1189.0], [23.6, 1192.0], [23.7, 1192.0], [23.8, 1194.0], [23.9, 1194.0], [24.0, 1194.0], [24.1, 1194.0], [24.2, 1202.0], [24.3, 1202.0], [24.4, 1204.0], [24.5, 1204.0], [24.6, 1207.0], [24.7, 1207.0], [24.8, 1210.0], [24.9, 1210.0], [25.0, 1212.0], [25.1, 1212.0], [25.2, 1214.0], [25.3, 1214.0], [25.4, 1214.0], [25.5, 1214.0], [25.6, 1216.0], [25.7, 1216.0], [25.8, 1236.0], [25.9, 1236.0], [26.0, 1241.0], [26.1, 1241.0], [26.2, 1242.0], [26.3, 1242.0], [26.4, 1245.0], [26.5, 1245.0], [26.6, 1247.0], [26.7, 1247.0], [26.8, 1249.0], [26.9, 1249.0], [27.0, 1250.0], [27.1, 1250.0], [27.2, 1252.0], [27.3, 1252.0], [27.4, 1253.0], [27.5, 1253.0], [27.6, 1254.0], [27.7, 1254.0], [27.8, 1254.0], [27.9, 1254.0], [28.0, 1255.0], [28.1, 1255.0], [28.2, 1256.0], [28.3, 1256.0], [28.4, 1256.0], [28.5, 1256.0], [28.6, 1257.0], [28.7, 1257.0], [28.8, 1257.0], [28.9, 1257.0], [29.0, 1258.0], [29.1, 1258.0], [29.2, 1258.0], [29.3, 1258.0], [29.4, 1259.0], [29.5, 1259.0], [29.6, 1259.0], [29.7, 1259.0], [29.8, 1260.0], [29.9, 1260.0], [30.0, 1261.0], [30.1, 1261.0], [30.2, 1262.0], [30.3, 1262.0], [30.4, 1262.0], [30.5, 1262.0], [30.6, 1263.0], [30.7, 1263.0], [30.8, 1263.0], [30.9, 1263.0], [31.0, 1263.0], [31.1, 1263.0], [31.2, 1264.0], [31.3, 1264.0], [31.4, 1264.0], [31.5, 1264.0], [31.6, 1264.0], [31.7, 1264.0], [31.8, 1265.0], [31.9, 1265.0], [32.0, 1266.0], [32.1, 1266.0], [32.2, 1266.0], [32.3, 1266.0], [32.4, 1266.0], [32.5, 1266.0], [32.6, 1266.0], [32.7, 1266.0], [32.8, 1267.0], [32.9, 1267.0], [33.0, 1267.0], [33.1, 1267.0], [33.2, 1267.0], [33.3, 1267.0], [33.4, 1267.0], [33.5, 1267.0], [33.6, 1269.0], [33.7, 1269.0], [33.8, 1269.0], [33.9, 1269.0], [34.0, 1269.0], [34.1, 1269.0], [34.2, 1269.0], [34.3, 1269.0], [34.4, 1269.0], [34.5, 1269.0], [34.6, 1270.0], [34.7, 1270.0], [34.8, 1270.0], [34.9, 1270.0], [35.0, 1270.0], [35.1, 1270.0], [35.2, 1270.0], [35.3, 1270.0], [35.4, 1270.0], [35.5, 1270.0], [35.6, 1271.0], [35.7, 1271.0], [35.8, 1271.0], [35.9, 1271.0], [36.0, 1271.0], [36.1, 1271.0], [36.2, 1271.0], [36.3, 1271.0], [36.4, 1271.0], [36.5, 1271.0], [36.6, 1271.0], [36.7, 1271.0], [36.8, 1271.0], [36.9, 1271.0], [37.0, 1271.0], [37.1, 1271.0], [37.2, 1271.0], [37.3, 1271.0], [37.4, 1272.0], [37.5, 1272.0], [37.6, 1272.0], [37.7, 1272.0], [37.8, 1272.0], [37.9, 1272.0], [38.0, 1272.0], [38.1, 1272.0], [38.2, 1272.0], [38.3, 1272.0], [38.4, 1272.0], [38.5, 1272.0], [38.6, 1272.0], [38.7, 1272.0], [38.8, 1272.0], [38.9, 1272.0], [39.0, 1273.0], [39.1, 1273.0], [39.2, 1273.0], [39.3, 1273.0], [39.4, 1273.0], [39.5, 1273.0], [39.6, 1273.0], [39.7, 1273.0], [39.8, 1274.0], [39.9, 1274.0], [40.0, 1275.0], [40.1, 1275.0], [40.2, 1275.0], [40.3, 1275.0], [40.4, 1275.0], [40.5, 1275.0], [40.6, 1275.0], [40.7, 1275.0], [40.8, 1275.0], [40.9, 1275.0], [41.0, 1275.0], [41.1, 1275.0], [41.2, 1276.0], [41.3, 1276.0], [41.4, 1276.0], [41.5, 1276.0], [41.6, 1276.0], [41.7, 1276.0], [41.8, 1277.0], [41.9, 1277.0], [42.0, 1277.0], [42.1, 1277.0], [42.2, 1277.0], [42.3, 1277.0], [42.4, 1278.0], [42.5, 1278.0], [42.6, 1278.0], [42.7, 1278.0], [42.8, 1279.0], [42.9, 1279.0], [43.0, 1279.0], [43.1, 1279.0], [43.2, 1280.0], [43.3, 1280.0], [43.4, 1280.0], [43.5, 1280.0], [43.6, 1280.0], [43.7, 1280.0], [43.8, 1280.0], [43.9, 1280.0], [44.0, 1280.0], [44.1, 1280.0], [44.2, 1281.0], [44.3, 1281.0], [44.4, 1281.0], [44.5, 1281.0], [44.6, 1281.0], [44.7, 1281.0], [44.8, 1281.0], [44.9, 1281.0], [45.0, 1281.0], [45.1, 1281.0], [45.2, 1281.0], [45.3, 1281.0], [45.4, 1282.0], [45.5, 1282.0], [45.6, 1282.0], [45.7, 1282.0], [45.8, 1282.0], [45.9, 1282.0], [46.0, 1282.0], [46.1, 1282.0], [46.2, 1282.0], [46.3, 1282.0], [46.4, 1282.0], [46.5, 1282.0], [46.6, 1282.0], [46.7, 1282.0], [46.8, 1282.0], [46.9, 1282.0], [47.0, 1283.0], [47.1, 1283.0], [47.2, 1283.0], [47.3, 1283.0], [47.4, 1283.0], [47.5, 1283.0], [47.6, 1283.0], [47.7, 1283.0], [47.8, 1283.0], [47.9, 1283.0], [48.0, 1284.0], [48.1, 1284.0], [48.2, 1284.0], [48.3, 1284.0], [48.4, 1284.0], [48.5, 1284.0], [48.6, 1284.0], [48.7, 1284.0], [48.8, 1284.0], [48.9, 1284.0], [49.0, 1285.0], [49.1, 1285.0], [49.2, 1285.0], [49.3, 1285.0], [49.4, 1286.0], [49.5, 1286.0], [49.6, 1286.0], [49.7, 1286.0], [49.8, 1286.0], [49.9, 1286.0], [50.0, 1287.0], [50.1, 1287.0], [50.2, 1287.0], [50.3, 1287.0], [50.4, 1287.0], [50.5, 1287.0], [50.6, 1287.0], [50.7, 1287.0], [50.8, 1287.0], [50.9, 1287.0], [51.0, 1288.0], [51.1, 1288.0], [51.2, 1288.0], [51.3, 1288.0], [51.4, 1289.0], [51.5, 1289.0], [51.6, 1289.0], [51.7, 1289.0], [51.8, 1289.0], [51.9, 1289.0], [52.0, 1289.0], [52.1, 1289.0], [52.2, 1289.0], [52.3, 1289.0], [52.4, 1289.0], [52.5, 1289.0], [52.6, 1290.0], [52.7, 1290.0], [52.8, 1290.0], [52.9, 1290.0], [53.0, 1290.0], [53.1, 1290.0], [53.2, 1290.0], [53.3, 1290.0], [53.4, 1291.0], [53.5, 1291.0], [53.6, 1291.0], [53.7, 1291.0], [53.8, 1291.0], [53.9, 1291.0], [54.0, 1291.0], [54.1, 1291.0], [54.2, 1293.0], [54.3, 1293.0], [54.4, 1293.0], [54.5, 1293.0], [54.6, 1293.0], [54.7, 1293.0], [54.8, 1293.0], [54.9, 1293.0], [55.0, 1294.0], [55.1, 1294.0], [55.2, 1294.0], [55.3, 1294.0], [55.4, 1294.0], [55.5, 1294.0], [55.6, 1295.0], [55.7, 1295.0], [55.8, 1295.0], [55.9, 1295.0], [56.0, 1295.0], [56.1, 1295.0], [56.2, 1295.0], [56.3, 1295.0], [56.4, 1296.0], [56.5, 1296.0], [56.6, 1296.0], [56.7, 1296.0], [56.8, 1297.0], [56.9, 1297.0], [57.0, 1297.0], [57.1, 1297.0], [57.2, 1297.0], [57.3, 1297.0], [57.4, 1297.0], [57.5, 1297.0], [57.6, 1297.0], [57.7, 1297.0], [57.8, 1298.0], [57.9, 1298.0], [58.0, 1298.0], [58.1, 1298.0], [58.2, 1299.0], [58.3, 1299.0], [58.4, 1299.0], [58.5, 1299.0], [58.6, 1299.0], [58.7, 1299.0], [58.8, 1299.0], [58.9, 1299.0], [59.0, 1300.0], [59.1, 1300.0], [59.2, 1300.0], [59.3, 1300.0], [59.4, 1301.0], [59.5, 1301.0], [59.6, 1301.0], [59.7, 1301.0], [59.8, 1301.0], [59.9, 1301.0], [60.0, 1302.0], [60.1, 1302.0], [60.2, 1302.0], [60.3, 1302.0], [60.4, 1302.0], [60.5, 1302.0], [60.6, 1305.0], [60.7, 1305.0], [60.8, 1305.0], [60.9, 1305.0], [61.0, 1306.0], [61.1, 1306.0], [61.2, 1307.0], [61.3, 1307.0], [61.4, 1307.0], [61.5, 1307.0], [61.6, 1309.0], [61.7, 1309.0], [61.8, 1310.0], [61.9, 1310.0], [62.0, 1310.0], [62.1, 1310.0], [62.2, 1310.0], [62.3, 1310.0], [62.4, 1310.0], [62.5, 1310.0], [62.6, 1311.0], [62.7, 1311.0], [62.8, 1312.0], [62.9, 1312.0], [63.0, 1314.0], [63.1, 1314.0], [63.2, 1318.0], [63.3, 1318.0], [63.4, 1319.0], [63.5, 1319.0], [63.6, 1320.0], [63.7, 1320.0], [63.8, 1325.0], [63.9, 1325.0], [64.0, 1325.0], [64.1, 1325.0], [64.2, 1326.0], [64.3, 1326.0], [64.4, 1326.0], [64.5, 1326.0], [64.6, 1327.0], [64.7, 1327.0], [64.8, 1329.0], [64.9, 1329.0], [65.0, 1337.0], [65.1, 1337.0], [65.2, 1345.0], [65.3, 1345.0], [65.4, 1347.0], [65.5, 1347.0], [65.6, 1348.0], [65.7, 1348.0], [65.8, 1361.0], [65.9, 1361.0], [66.0, 1368.0], [66.1, 1368.0], [66.2, 1368.0], [66.3, 1368.0], [66.4, 1373.0], [66.5, 1373.0], [66.6, 1373.0], [66.7, 1377.0], [66.8, 1377.0], [66.9, 1384.0], [67.0, 1384.0], [67.1, 1394.0], [67.2, 1394.0], [67.3, 1396.0], [67.4, 1396.0], [67.5, 1405.0], [67.6, 1405.0], [67.7, 1438.0], [67.8, 1438.0], [67.9, 1474.0], [68.0, 1474.0], [68.1, 1510.0], [68.2, 1510.0], [68.3, 1529.0], [68.4, 1529.0], [68.5, 1542.0], [68.6, 1542.0], [68.7, 1549.0], [68.8, 1549.0], [68.9, 1562.0], [69.0, 1562.0], [69.1, 1568.0], [69.2, 1568.0], [69.3, 1610.0], [69.4, 1610.0], [69.5, 1655.0], [69.6, 1655.0], [69.7, 1657.0], [69.8, 1657.0], [69.9, 1664.0], [70.0, 1664.0], [70.1, 1679.0], [70.2, 1679.0], [70.3, 1694.0], [70.4, 1694.0], [70.5, 1701.0], [70.6, 1701.0], [70.7, 1709.0], [70.8, 1709.0], [70.9, 1760.0], [71.0, 1760.0], [71.1, 1765.0], [71.2, 1765.0], [71.3, 1769.0], [71.4, 1769.0], [71.5, 1780.0], [71.6, 1780.0], [71.7, 1790.0], [71.8, 1790.0], [71.9, 1791.0], [72.0, 1791.0], [72.1, 1802.0], [72.2, 1802.0], [72.3, 1810.0], [72.4, 1810.0], [72.5, 1811.0], [72.6, 1811.0], [72.7, 1812.0], [72.8, 1812.0], [72.9, 1818.0], [73.0, 1818.0], [73.1, 1829.0], [73.2, 1829.0], [73.3, 1832.0], [73.4, 1832.0], [73.5, 1846.0], [73.6, 1846.0], [73.7, 1851.0], [73.8, 1851.0], [73.9, 1861.0], [74.0, 1861.0], [74.1, 1863.0], [74.2, 1863.0], [74.3, 1903.0], [74.4, 1903.0], [74.5, 1918.0], [74.6, 1918.0], [74.7, 1919.0], [74.8, 1919.0], [74.9, 1922.0], [75.0, 1922.0], [75.1, 1923.0], [75.2, 1923.0], [75.3, 1932.0], [75.4, 1932.0], [75.5, 1934.0], [75.6, 1934.0], [75.7, 1935.0], [75.8, 1935.0], [75.9, 1936.0], [76.0, 1936.0], [76.1, 1937.0], [76.2, 1937.0], [76.3, 1938.0], [76.4, 1938.0], [76.5, 1940.0], [76.6, 1940.0], [76.7, 1943.0], [76.8, 1943.0], [76.9, 1947.0], [77.0, 1947.0], [77.1, 1950.0], [77.2, 1950.0], [77.3, 1951.0], [77.4, 1951.0], [77.5, 1957.0], [77.6, 1957.0], [77.7, 1962.0], [77.8, 1962.0], [77.9, 1966.0], [78.0, 1966.0], [78.1, 1968.0], [78.2, 1968.0], [78.3, 1969.0], [78.4, 1969.0], [78.5, 1969.0], [78.6, 1969.0], [78.7, 1973.0], [78.8, 1973.0], [78.9, 1975.0], [79.0, 1975.0], [79.1, 1976.0], [79.2, 1976.0], [79.3, 1976.0], [79.4, 1976.0], [79.5, 1980.0], [79.6, 1980.0], [79.7, 1980.0], [79.8, 1980.0], [79.9, 2001.0], [80.0, 2001.0], [80.1, 2013.0], [80.2, 2013.0], [80.3, 2024.0], [80.4, 2024.0], [80.5, 2028.0], [80.6, 2028.0], [80.7, 2041.0], [80.8, 2041.0], [80.9, 2060.0], [81.0, 2060.0], [81.1, 2107.0], [81.2, 2107.0], [81.3, 2109.0], [81.4, 2109.0], [81.5, 2109.0], [81.6, 2109.0], [81.7, 2111.0], [81.8, 2111.0], [81.9, 2124.0], [82.0, 2124.0], [82.1, 2130.0], [82.2, 2130.0], [82.3, 2133.0], [82.4, 2133.0], [82.5, 2139.0], [82.6, 2139.0], [82.7, 2141.0], [82.8, 2141.0], [82.9, 2144.0], [83.0, 2144.0], [83.1, 2146.0], [83.2, 2146.0], [83.3, 2164.0], [83.4, 2164.0], [83.5, 2166.0], [83.6, 2166.0], [83.7, 2174.0], [83.8, 2174.0], [83.9, 2175.0], [84.0, 2175.0], [84.1, 2176.0], [84.2, 2176.0], [84.3, 2182.0], [84.4, 2182.0], [84.5, 2189.0], [84.6, 2189.0], [84.7, 2189.0], [84.8, 2189.0], [84.9, 2192.0], [85.0, 2192.0], [85.1, 2193.0], [85.2, 2193.0], [85.3, 2200.0], [85.4, 2200.0], [85.5, 2203.0], [85.6, 2203.0], [85.7, 2206.0], [85.8, 2206.0], [85.9, 2209.0], [86.0, 2209.0], [86.1, 2213.0], [86.2, 2213.0], [86.3, 2215.0], [86.4, 2215.0], [86.5, 2215.0], [86.6, 2215.0], [86.7, 2216.0], [86.8, 2216.0], [86.9, 2216.0], [87.0, 2216.0], [87.1, 2217.0], [87.2, 2217.0], [87.3, 2219.0], [87.4, 2219.0], [87.5, 2223.0], [87.6, 2223.0], [87.7, 2223.0], [87.8, 2223.0], [87.9, 2241.0], [88.0, 2241.0], [88.1, 2245.0], [88.2, 2245.0], [88.3, 2246.0], [88.4, 2246.0], [88.5, 2249.0], [88.6, 2249.0], [88.7, 2251.0], [88.8, 2251.0], [88.9, 2252.0], [89.0, 2252.0], [89.1, 2258.0], [89.2, 2258.0], [89.3, 2259.0], [89.4, 2259.0], [89.5, 2265.0], [89.6, 2265.0], [89.7, 2266.0], [89.8, 2266.0], [89.9, 2267.0], [90.0, 2267.0], [90.1, 2272.0], [90.2, 2272.0], [90.3, 2273.0], [90.4, 2273.0], [90.5, 2274.0], [90.6, 2274.0], [90.7, 2275.0], [90.8, 2275.0], [90.9, 2276.0], [91.0, 2276.0], [91.1, 2279.0], [91.2, 2279.0], [91.3, 2284.0], [91.4, 2284.0], [91.5, 2284.0], [91.6, 2284.0], [91.7, 2287.0], [91.8, 2287.0], [91.9, 2288.0], [92.0, 2288.0], [92.1, 2290.0], [92.2, 2290.0], [92.3, 2292.0], [92.4, 2292.0], [92.5, 2293.0], [92.6, 2293.0], [92.7, 2293.0], [92.8, 2293.0], [92.9, 2294.0], [93.0, 2294.0], [93.1, 2296.0], [93.2, 2296.0], [93.3, 2300.0], [93.4, 2300.0], [93.5, 2304.0], [93.6, 2304.0], [93.7, 2307.0], [93.8, 2307.0], [93.9, 2310.0], [94.0, 2310.0], [94.1, 2311.0], [94.2, 2311.0], [94.3, 2312.0], [94.4, 2312.0], [94.5, 2316.0], [94.6, 2316.0], [94.7, 2317.0], [94.8, 2317.0], [94.9, 2318.0], [95.0, 2318.0], [95.1, 2320.0], [95.2, 2320.0], [95.3, 2323.0], [95.4, 2323.0], [95.5, 2363.0], [95.6, 2363.0], [95.7, 2384.0], [95.8, 2384.0], [95.9, 2386.0], [96.0, 2386.0], [96.1, 2407.0], [96.2, 2407.0], [96.3, 2445.0], [96.4, 2445.0], [96.5, 2701.0], [96.6, 2701.0], [96.7, 2710.0], [96.8, 2710.0], [96.9, 2721.0], [97.0, 2721.0], [97.1, 2734.0], [97.2, 2734.0], [97.3, 2755.0], [97.4, 2755.0], [97.5, 2757.0], [97.6, 2757.0], [97.7, 2793.0], [97.8, 2793.0], [97.9, 2795.0], [98.0, 2795.0], [98.1, 2853.0], [98.2, 2853.0], [98.3, 2865.0], [98.4, 2865.0], [98.5, 2911.0], [98.6, 2911.0], [98.7, 2915.0], [98.8, 2915.0], [98.9, 2971.0], [99.0, 2971.0], [99.1, 3110.0], [99.2, 3110.0], [99.3, 3386.0], [99.4, 3386.0], [99.5, 3414.0], [99.6, 3414.0], [99.7, 3539.0], [99.8, 3539.0], [99.9, 3693.0], [100.0, 3693.0]], "isOverall": false, "label": "auth", "isController": false}, {"data": [[0.0, 270.0], [0.1, 270.0], [0.2, 272.0], [0.3, 272.0], [0.4, 273.0], [0.5, 273.0], [0.6, 273.0], [0.7, 274.0], [0.8, 278.0], [0.9, 278.0], [1.0, 279.0], [1.1, 279.0], [1.2, 282.0], [1.3, 282.0], [1.4, 285.0], [1.5, 285.0], [1.6, 293.0], [1.7, 293.0], [1.8, 303.0], [1.9, 303.0], [2.0, 308.0], [2.1, 308.0], [2.2, 311.0], [2.3, 311.0], [2.4, 312.0], [2.5, 312.0], [2.6, 312.0], [2.7, 312.0], [2.8, 312.0], [2.9, 312.0], [3.0, 313.0], [3.1, 313.0], [3.2, 313.0], [3.3, 313.0], [3.4, 313.0], [3.5, 313.0], [3.6, 313.0], [3.7, 313.0], [3.8, 313.0], [3.9, 313.0], [4.0, 313.0], [4.1, 313.0], [4.2, 314.0], [4.3, 314.0], [4.4, 314.0], [4.5, 314.0], [4.6, 314.0], [4.7, 314.0], [4.8, 314.0], [4.9, 314.0], [5.0, 314.0], [5.1, 314.0], [5.2, 314.0], [5.3, 314.0], [5.4, 314.0], [5.5, 314.0], [5.6, 315.0], [5.7, 315.0], [5.8, 315.0], [5.9, 315.0], [6.0, 315.0], [6.1, 315.0], [6.2, 315.0], [6.3, 315.0], [6.4, 315.0], [6.5, 315.0], [6.6, 315.0], [6.7, 315.0], [6.8, 315.0], [6.9, 315.0], [7.0, 315.0], [7.1, 315.0], [7.2, 315.0], [7.3, 315.0], [7.4, 315.0], [7.5, 315.0], [7.6, 316.0], [7.7, 316.0], [7.8, 316.0], [7.9, 316.0], [8.0, 316.0], [8.1, 316.0], [8.2, 316.0], [8.3, 316.0], [8.4, 316.0], [8.5, 316.0], [8.6, 316.0], [8.7, 316.0], [8.8, 316.0], [8.9, 316.0], [9.0, 316.0], [9.1, 316.0], [9.2, 316.0], [9.3, 316.0], [9.4, 316.0], [9.5, 316.0], [9.6, 316.0], [9.7, 316.0], [9.8, 316.0], [9.9, 316.0], [10.0, 317.0], [10.1, 317.0], [10.2, 317.0], [10.3, 317.0], [10.4, 317.0], [10.5, 317.0], [10.6, 317.0], [10.7, 317.0], [10.8, 317.0], [10.9, 317.0], [11.0, 317.0], [11.1, 317.0], [11.2, 317.0], [11.3, 317.0], [11.4, 317.0], [11.5, 317.0], [11.6, 317.0], [11.7, 317.0], [11.8, 317.0], [11.9, 317.0], [12.0, 317.0], [12.1, 317.0], [12.2, 317.0], [12.3, 317.0], [12.4, 317.0], [12.5, 317.0], [12.6, 317.0], [12.7, 317.0], [12.8, 318.0], [12.9, 318.0], [13.0, 318.0], [13.1, 318.0], [13.2, 318.0], [13.3, 318.0], [13.4, 318.0], [13.5, 318.0], [13.6, 318.0], [13.7, 318.0], [13.8, 318.0], [13.9, 318.0], [14.0, 318.0], [14.1, 318.0], [14.2, 318.0], [14.3, 318.0], [14.4, 318.0], [14.5, 318.0], [14.6, 318.0], [14.7, 318.0], [14.8, 318.0], [14.9, 318.0], [15.0, 318.0], [15.1, 318.0], [15.2, 318.0], [15.3, 318.0], [15.4, 318.0], [15.5, 318.0], [15.6, 318.0], [15.7, 319.0], [15.8, 319.0], [15.9, 319.0], [16.0, 319.0], [16.1, 319.0], [16.2, 319.0], [16.3, 319.0], [16.4, 319.0], [16.5, 320.0], [16.6, 320.0], [16.7, 320.0], [16.8, 320.0], [16.9, 320.0], [17.0, 320.0], [17.1, 320.0], [17.2, 320.0], [17.3, 320.0], [17.4, 320.0], [17.5, 320.0], [17.6, 320.0], [17.7, 320.0], [17.8, 320.0], [17.9, 320.0], [18.0, 320.0], [18.1, 320.0], [18.2, 320.0], [18.3, 320.0], [18.4, 320.0], [18.5, 320.0], [18.6, 321.0], [18.7, 321.0], [18.8, 321.0], [18.9, 321.0], [19.0, 321.0], [19.1, 321.0], [19.2, 321.0], [19.3, 321.0], [19.4, 321.0], [19.5, 321.0], [19.6, 321.0], [19.7, 321.0], [19.8, 321.0], [19.9, 321.0], [20.0, 321.0], [20.1, 321.0], [20.2, 321.0], [20.3, 321.0], [20.4, 321.0], [20.5, 322.0], [20.6, 322.0], [20.7, 322.0], [20.8, 322.0], [20.9, 322.0], [21.0, 322.0], [21.1, 322.0], [21.2, 322.0], [21.3, 322.0], [21.4, 322.0], [21.5, 322.0], [21.6, 322.0], [21.7, 322.0], [21.8, 322.0], [21.9, 322.0], [22.0, 322.0], [22.1, 322.0], [22.2, 322.0], [22.3, 323.0], [22.4, 323.0], [22.5, 323.0], [22.6, 323.0], [22.7, 323.0], [22.8, 323.0], [22.9, 323.0], [23.0, 323.0], [23.1, 323.0], [23.2, 323.0], [23.3, 323.0], [23.4, 323.0], [23.5, 323.0], [23.6, 324.0], [23.7, 324.0], [23.8, 324.0], [23.9, 324.0], [24.0, 324.0], [24.1, 324.0], [24.2, 324.0], [24.3, 324.0], [24.4, 324.0], [24.5, 325.0], [24.6, 325.0], [24.7, 325.0], [24.8, 325.0], [24.9, 325.0], [25.0, 325.0], [25.1, 325.0], [25.2, 325.0], [25.3, 325.0], [25.4, 325.0], [25.5, 326.0], [25.6, 326.0], [25.7, 326.0], [25.8, 326.0], [25.9, 326.0], [26.0, 326.0], [26.1, 326.0], [26.2, 326.0], [26.3, 326.0], [26.4, 326.0], [26.5, 326.0], [26.6, 326.0], [26.7, 326.0], [26.8, 326.0], [26.9, 326.0], [27.0, 326.0], [27.1, 327.0], [27.2, 327.0], [27.3, 327.0], [27.4, 327.0], [27.5, 327.0], [27.6, 327.0], [27.7, 327.0], [27.8, 327.0], [27.9, 327.0], [28.0, 327.0], [28.1, 327.0], [28.2, 327.0], [28.3, 327.0], [28.4, 327.0], [28.5, 327.0], [28.6, 327.0], [28.7, 327.0], [28.8, 327.0], [28.9, 328.0], [29.0, 328.0], [29.1, 328.0], [29.2, 328.0], [29.3, 328.0], [29.4, 328.0], [29.5, 328.0], [29.6, 328.0], [29.7, 328.0], [29.8, 328.0], [29.9, 328.0], [30.0, 328.0], [30.1, 328.0], [30.2, 328.0], [30.3, 328.0], [30.4, 328.0], [30.5, 329.0], [30.6, 329.0], [30.7, 329.0], [30.8, 329.0], [30.9, 329.0], [31.0, 329.0], [31.1, 329.0], [31.2, 329.0], [31.3, 329.0], [31.4, 329.0], [31.5, 329.0], [31.6, 329.0], [31.7, 330.0], [31.8, 330.0], [31.9, 330.0], [32.0, 330.0], [32.1, 330.0], [32.2, 330.0], [32.3, 330.0], [32.4, 330.0], [32.5, 331.0], [32.6, 331.0], [32.7, 331.0], [32.8, 331.0], [32.9, 331.0], [33.0, 331.0], [33.1, 332.0], [33.2, 332.0], [33.3, 332.0], [33.4, 332.0], [33.5, 333.0], [33.6, 333.0], [33.7, 333.0], [33.8, 333.0], [33.9, 333.0], [34.0, 333.0], [34.1, 333.0], [34.2, 334.0], [34.3, 334.0], [34.4, 334.0], [34.5, 334.0], [34.6, 334.0], [34.7, 334.0], [34.8, 334.0], [34.9, 336.0], [35.0, 336.0], [35.1, 336.0], [35.2, 336.0], [35.3, 336.0], [35.4, 336.0], [35.5, 338.0], [35.6, 338.0], [35.7, 338.0], [35.8, 338.0], [35.9, 340.0], [36.0, 340.0], [36.1, 340.0], [36.2, 340.0], [36.3, 340.0], [36.4, 340.0], [36.5, 340.0], [36.6, 341.0], [36.7, 341.0], [36.8, 341.0], [36.9, 343.0], [37.0, 343.0], [37.1, 344.0], [37.2, 344.0], [37.3, 347.0], [37.4, 347.0], [37.5, 348.0], [37.6, 348.0], [37.7, 351.0], [37.8, 351.0], [37.9, 351.0], [38.0, 351.0], [38.1, 352.0], [38.2, 352.0], [38.3, 353.0], [38.4, 353.0], [38.5, 354.0], [38.6, 354.0], [38.7, 356.0], [38.8, 356.0], [38.9, 358.0], [39.0, 358.0], [39.1, 366.0], [39.2, 366.0], [39.3, 371.0], [39.4, 371.0], [39.5, 372.0], [39.6, 372.0], [39.7, 378.0], [39.8, 378.0], [39.9, 378.0], [40.0, 378.0], [40.1, 379.0], [40.2, 379.0], [40.3, 381.0], [40.4, 381.0], [40.5, 381.0], [40.6, 381.0], [40.7, 381.0], [40.8, 381.0], [40.9, 383.0], [41.0, 383.0], [41.1, 384.0], [41.2, 384.0], [41.3, 384.0], [41.4, 384.0], [41.5, 385.0], [41.6, 385.0], [41.7, 385.0], [41.8, 385.0], [41.9, 385.0], [42.0, 385.0], [42.1, 386.0], [42.2, 386.0], [42.3, 388.0], [42.4, 388.0], [42.5, 389.0], [42.6, 389.0], [42.7, 389.0], [42.8, 389.0], [42.9, 389.0], [43.0, 389.0], [43.1, 396.0], [43.2, 396.0], [43.3, 533.0], [43.4, 533.0], [43.5, 533.0], [43.6, 533.0], [43.7, 534.0], [43.8, 534.0], [43.9, 534.0], [44.0, 534.0], [44.1, 534.0], [44.2, 534.0], [44.3, 534.0], [44.4, 534.0], [44.5, 535.0], [44.6, 535.0], [44.7, 535.0], [44.8, 535.0], [44.9, 535.0], [45.0, 535.0], [45.1, 535.0], [45.2, 535.0], [45.3, 535.0], [45.4, 535.0], [45.5, 536.0], [45.6, 536.0], [45.7, 536.0], [45.8, 536.0], [45.9, 536.0], [46.0, 536.0], [46.1, 536.0], [46.2, 536.0], [46.3, 536.0], [46.4, 536.0], [46.5, 536.0], [46.6, 536.0], [46.7, 536.0], [46.8, 536.0], [46.9, 537.0], [47.0, 537.0], [47.1, 537.0], [47.2, 537.0], [47.3, 537.0], [47.4, 537.0], [47.5, 537.0], [47.6, 537.0], [47.7, 537.0], [47.8, 537.0], [47.9, 537.0], [48.0, 537.0], [48.1, 538.0], [48.2, 538.0], [48.3, 538.0], [48.4, 538.0], [48.5, 538.0], [48.6, 538.0], [48.7, 538.0], [48.8, 538.0], [48.9, 538.0], [49.0, 538.0], [49.1, 538.0], [49.2, 538.0], [49.3, 538.0], [49.4, 538.0], [49.5, 539.0], [49.6, 539.0], [49.7, 539.0], [49.8, 539.0], [49.9, 539.0], [50.0, 539.0], [50.1, 539.0], [50.2, 539.0], [50.3, 539.0], [50.4, 539.0], [50.5, 539.0], [50.6, 539.0], [50.7, 539.0], [50.8, 539.0], [50.9, 539.0], [51.0, 539.0], [51.1, 539.0], [51.2, 539.0], [51.3, 539.0], [51.4, 539.0], [51.5, 540.0], [51.6, 540.0], [51.7, 540.0], [51.8, 540.0], [51.9, 540.0], [52.0, 540.0], [52.1, 540.0], [52.2, 540.0], [52.3, 540.0], [52.4, 540.0], [52.5, 540.0], [52.6, 540.0], [52.7, 540.0], [52.8, 540.0], [52.9, 540.0], [53.0, 540.0], [53.1, 540.0], [53.2, 540.0], [53.3, 540.0], [53.4, 540.0], [53.5, 540.0], [53.6, 540.0], [53.7, 540.0], [53.8, 540.0], [53.9, 540.0], [54.0, 540.0], [54.1, 540.0], [54.2, 540.0], [54.3, 540.0], [54.4, 540.0], [54.5, 540.0], [54.6, 540.0], [54.7, 541.0], [54.8, 541.0], [54.9, 541.0], [55.0, 541.0], [55.1, 541.0], [55.2, 541.0], [55.3, 541.0], [55.4, 541.0], [55.5, 541.0], [55.6, 541.0], [55.7, 541.0], [55.8, 541.0], [55.9, 541.0], [56.0, 541.0], [56.1, 541.0], [56.2, 541.0], [56.3, 541.0], [56.4, 541.0], [56.5, 541.0], [56.6, 541.0], [56.7, 541.0], [56.8, 541.0], [56.9, 541.0], [57.0, 541.0], [57.1, 541.0], [57.2, 541.0], [57.3, 541.0], [57.4, 541.0], [57.5, 541.0], [57.6, 541.0], [57.7, 541.0], [57.8, 541.0], [57.9, 542.0], [58.0, 542.0], [58.1, 542.0], [58.2, 542.0], [58.3, 542.0], [58.4, 542.0], [58.5, 542.0], [58.6, 542.0], [58.7, 542.0], [58.8, 542.0], [58.9, 542.0], [59.0, 542.0], [59.1, 542.0], [59.2, 542.0], [59.3, 542.0], [59.4, 542.0], [59.5, 542.0], [59.6, 542.0], [59.7, 542.0], [59.8, 542.0], [59.9, 543.0], [60.0, 543.0], [60.1, 543.0], [60.2, 543.0], [60.3, 543.0], [60.4, 543.0], [60.5, 543.0], [60.6, 543.0], [60.7, 543.0], [60.8, 543.0], [60.9, 543.0], [61.0, 543.0], [61.1, 543.0], [61.2, 543.0], [61.3, 543.0], [61.4, 543.0], [61.5, 543.0], [61.6, 543.0], [61.7, 543.0], [61.8, 543.0], [61.9, 543.0], [62.0, 543.0], [62.1, 543.0], [62.2, 543.0], [62.3, 543.0], [62.4, 543.0], [62.5, 543.0], [62.6, 543.0], [62.7, 543.0], [62.8, 543.0], [62.9, 543.0], [63.0, 543.0], [63.1, 544.0], [63.2, 544.0], [63.3, 544.0], [63.4, 544.0], [63.5, 544.0], [63.6, 544.0], [63.7, 544.0], [63.8, 544.0], [63.9, 544.0], [64.0, 544.0], [64.1, 544.0], [64.2, 544.0], [64.3, 544.0], [64.4, 544.0], [64.5, 544.0], [64.6, 544.0], [64.7, 544.0], [64.8, 544.0], [64.9, 544.0], [65.0, 544.0], [65.1, 544.0], [65.2, 544.0], [65.3, 544.0], [65.4, 544.0], [65.5, 544.0], [65.6, 544.0], [65.7, 544.0], [65.8, 544.0], [65.9, 544.0], [66.0, 544.0], [66.1, 544.0], [66.2, 544.0], [66.3, 545.0], [66.4, 545.0], [66.5, 546.0], [66.6, 546.0], [66.7, 546.0], [66.8, 546.0], [66.9, 546.0], [67.0, 546.0], [67.1, 546.0], [67.2, 546.0], [67.3, 546.0], [67.4, 546.0], [67.5, 546.0], [67.6, 546.0], [67.7, 546.0], [67.8, 546.0], [67.9, 546.0], [68.0, 546.0], [68.1, 546.0], [68.2, 546.0], [68.3, 547.0], [68.4, 547.0], [68.5, 547.0], [68.6, 547.0], [68.7, 547.0], [68.8, 547.0], [68.9, 547.0], [69.0, 547.0], [69.1, 547.0], [69.2, 547.0], [69.3, 547.0], [69.4, 547.0], [69.5, 547.0], [69.6, 547.0], [69.7, 548.0], [69.8, 548.0], [69.9, 548.0], [70.0, 548.0], [70.1, 548.0], [70.2, 548.0], [70.3, 548.0], [70.4, 548.0], [70.5, 548.0], [70.6, 548.0], [70.7, 548.0], [70.8, 548.0], [70.9, 548.0], [71.0, 548.0], [71.1, 549.0], [71.2, 549.0], [71.3, 549.0], [71.4, 549.0], [71.5, 549.0], [71.6, 549.0], [71.7, 549.0], [71.8, 549.0], [71.9, 549.0], [72.0, 549.0], [72.1, 550.0], [72.2, 550.0], [72.3, 550.0], [72.4, 550.0], [72.5, 550.0], [72.6, 550.0], [72.7, 551.0], [72.8, 551.0], [72.9, 551.0], [73.0, 551.0], [73.1, 551.0], [73.2, 551.0], [73.3, 551.0], [73.4, 551.0], [73.5, 551.0], [73.6, 551.0], [73.7, 552.0], [73.8, 552.0], [73.9, 552.0], [74.0, 552.0], [74.1, 553.0], [74.2, 553.0], [74.3, 554.0], [74.4, 554.0], [74.5, 554.0], [74.6, 554.0], [74.7, 556.0], [74.8, 556.0], [74.9, 560.0], [75.0, 560.0], [75.1, 564.0], [75.2, 564.0], [75.3, 564.0], [75.4, 564.0], [75.5, 564.0], [75.6, 564.0], [75.7, 566.0], [75.8, 566.0], [75.9, 568.0], [76.0, 568.0], [76.1, 574.0], [76.2, 574.0], [76.3, 579.0], [76.4, 579.0], [76.5, 583.0], [76.6, 583.0], [76.7, 592.0], [76.8, 592.0], [76.9, 595.0], [77.0, 595.0], [77.1, 595.0], [77.2, 595.0], [77.3, 598.0], [77.4, 598.0], [77.5, 605.0], [77.6, 605.0], [77.7, 607.0], [77.8, 607.0], [77.9, 615.0], [78.0, 615.0], [78.1, 615.0], [78.2, 615.0], [78.3, 617.0], [78.4, 617.0], [78.5, 619.0], [78.6, 619.0], [78.7, 620.0], [78.8, 620.0], [78.9, 622.0], [79.0, 622.0], [79.1, 623.0], [79.2, 623.0], [79.3, 623.0], [79.4, 623.0], [79.5, 623.0], [79.6, 623.0], [79.7, 624.0], [79.8, 624.0], [79.9, 624.0], [80.0, 624.0], [80.1, 625.0], [80.2, 625.0], [80.3, 625.0], [80.4, 625.0], [80.5, 625.0], [80.6, 625.0], [80.7, 625.0], [80.8, 625.0], [80.9, 625.0], [81.0, 625.0], [81.1, 625.0], [81.2, 625.0], [81.3, 626.0], [81.4, 626.0], [81.5, 626.0], [81.6, 626.0], [81.7, 627.0], [81.8, 627.0], [81.9, 628.0], [82.0, 628.0], [82.1, 628.0], [82.2, 628.0], [82.3, 628.0], [82.4, 628.0], [82.5, 628.0], [82.6, 628.0], [82.7, 628.0], [82.8, 628.0], [82.9, 629.0], [83.0, 629.0], [83.1, 629.0], [83.2, 629.0], [83.3, 629.0], [83.4, 629.0], [83.5, 629.0], [83.6, 629.0], [83.7, 629.0], [83.8, 629.0], [83.9, 630.0], [84.0, 630.0], [84.1, 630.0], [84.2, 630.0], [84.3, 630.0], [84.4, 630.0], [84.5, 630.0], [84.6, 630.0], [84.7, 630.0], [84.8, 630.0], [84.9, 630.0], [85.0, 630.0], [85.1, 631.0], [85.2, 631.0], [85.3, 631.0], [85.4, 631.0], [85.5, 631.0], [85.6, 631.0], [85.7, 631.0], [85.8, 631.0], [85.9, 631.0], [86.0, 631.0], [86.1, 632.0], [86.2, 632.0], [86.3, 632.0], [86.4, 632.0], [86.5, 632.0], [86.6, 632.0], [86.7, 632.0], [86.8, 632.0], [86.9, 633.0], [87.0, 633.0], [87.1, 633.0], [87.2, 633.0], [87.3, 634.0], [87.4, 634.0], [87.5, 634.0], [87.6, 634.0], [87.7, 634.0], [87.8, 634.0], [87.9, 635.0], [88.0, 635.0], [88.1, 635.0], [88.2, 635.0], [88.3, 636.0], [88.4, 636.0], [88.5, 637.0], [88.6, 637.0], [88.7, 637.0], [88.8, 637.0], [88.9, 637.0], [89.0, 637.0], [89.1, 637.0], [89.2, 637.0], [89.3, 637.0], [89.4, 637.0], [89.5, 638.0], [89.6, 638.0], [89.7, 638.0], [89.8, 638.0], [89.9, 638.0], [90.0, 638.0], [90.1, 638.0], [90.2, 638.0], [90.3, 639.0], [90.4, 639.0], [90.5, 639.0], [90.6, 639.0], [90.7, 639.0], [90.8, 639.0], [90.9, 640.0], [91.0, 640.0], [91.1, 640.0], [91.2, 640.0], [91.3, 641.0], [91.4, 641.0], [91.5, 641.0], [91.6, 641.0], [91.7, 641.0], [91.8, 641.0], [91.9, 642.0], [92.0, 642.0], [92.1, 642.0], [92.2, 642.0], [92.3, 644.0], [92.4, 644.0], [92.5, 644.0], [92.6, 644.0], [92.7, 644.0], [92.8, 644.0], [92.9, 645.0], [93.0, 645.0], [93.1, 646.0], [93.2, 646.0], [93.3, 647.0], [93.4, 647.0], [93.5, 647.0], [93.6, 647.0], [93.7, 648.0], [93.8, 648.0], [93.9, 650.0], [94.0, 650.0], [94.1, 659.0], [94.2, 659.0], [94.3, 772.0], [94.4, 772.0], [94.5, 787.0], [94.6, 787.0], [94.7, 797.0], [94.8, 797.0], [94.9, 807.0], [95.0, 807.0], [95.1, 807.0], [95.2, 807.0], [95.3, 817.0], [95.4, 817.0], [95.5, 824.0], [95.6, 824.0], [95.7, 833.0], [95.8, 833.0], [95.9, 865.0], [96.0, 865.0], [96.1, 884.0], [96.2, 884.0], [96.3, 941.0], [96.4, 941.0], [96.5, 981.0], [96.6, 981.0], [96.7, 982.0], [96.8, 982.0], [96.9, 1072.0], [97.0, 1072.0], [97.1, 1079.0], [97.2, 1079.0], [97.3, 1098.0], [97.4, 1098.0], [97.5, 1104.0], [97.6, 1104.0], [97.7, 1106.0], [97.8, 1106.0], [97.9, 1111.0], [98.0, 1111.0], [98.1, 1127.0], [98.2, 1127.0], [98.3, 1140.0], [98.4, 1140.0], [98.5, 1213.0], [98.6, 1213.0], [98.7, 1285.0], [98.8, 1285.0], [98.9, 1295.0], [99.0, 1295.0], [99.1, 1315.0], [99.2, 1315.0], [99.3, 1327.0], [99.4, 1327.0], [99.5, 1354.0], [99.6, 1354.0], [99.7, 1861.0], [99.8, 1861.0], [99.9, 2540.0], [100.0, 2540.0]], "isOverall": false, "label": "GetBooking", "isController": false}, {"data": [[0.0, 266.0], [0.1, 266.0], [0.2, 267.0], [0.3, 267.0], [0.4, 267.0], [0.5, 267.0], [0.6, 267.0], [0.7, 267.0], [0.8, 267.0], [0.9, 267.0], [1.0, 267.0], [1.1, 267.0], [1.2, 268.0], [1.3, 268.0], [1.4, 268.0], [1.5, 268.0], [1.6, 268.0], [1.7, 268.0], [1.8, 268.0], [1.9, 268.0], [2.0, 268.0], [2.1, 268.0], [2.2, 268.0], [2.3, 268.0], [2.4, 268.0], [2.5, 268.0], [2.6, 268.0], [2.7, 268.0], [2.8, 269.0], [2.9, 269.0], [3.0, 269.0], [3.1, 269.0], [3.2, 269.0], [3.3, 269.0], [3.4, 269.0], [3.5, 269.0], [3.6, 269.0], [3.7, 269.0], [3.8, 269.0], [3.9, 269.0], [4.0, 269.0], [4.1, 269.0], [4.2, 269.0], [4.3, 269.0], [4.4, 269.0], [4.5, 269.0], [4.6, 269.0], [4.7, 269.0], [4.8, 269.0], [4.9, 269.0], [5.0, 269.0], [5.1, 269.0], [5.2, 269.0], [5.3, 269.0], [5.4, 269.0], [5.5, 269.0], [5.6, 269.0], [5.7, 269.0], [5.8, 269.0], [5.9, 269.0], [6.0, 269.0], [6.1, 269.0], [6.2, 270.0], [6.3, 270.0], [6.4, 270.0], [6.5, 270.0], [6.6, 270.0], [6.7, 270.0], [6.8, 270.0], [6.9, 270.0], [7.0, 270.0], [7.1, 270.0], [7.2, 270.0], [7.3, 270.0], [7.4, 270.0], [7.5, 270.0], [7.6, 270.0], [7.7, 270.0], [7.8, 270.0], [7.9, 270.0], [8.0, 270.0], [8.1, 270.0], [8.2, 270.0], [8.3, 270.0], [8.4, 270.0], [8.5, 270.0], [8.6, 270.0], [8.7, 270.0], [8.8, 270.0], [8.9, 270.0], [9.0, 270.0], [9.1, 270.0], [9.2, 270.0], [9.3, 270.0], [9.4, 270.0], [9.5, 270.0], [9.6, 270.0], [9.7, 270.0], [9.8, 270.0], [9.9, 270.0], [10.0, 270.0], [10.1, 270.0], [10.2, 270.0], [10.3, 270.0], [10.4, 270.0], [10.5, 270.0], [10.6, 270.0], [10.7, 270.0], [10.8, 270.0], [10.9, 270.0], [11.0, 271.0], [11.1, 271.0], [11.2, 271.0], [11.3, 271.0], [11.4, 271.0], [11.5, 271.0], [11.6, 271.0], [11.7, 271.0], [11.8, 271.0], [11.9, 271.0], [12.0, 271.0], [12.1, 271.0], [12.2, 271.0], [12.3, 271.0], [12.4, 271.0], [12.5, 271.0], [12.6, 271.0], [12.7, 271.0], [12.8, 271.0], [12.9, 271.0], [13.0, 271.0], [13.1, 271.0], [13.2, 271.0], [13.3, 271.0], [13.4, 271.0], [13.5, 271.0], [13.6, 271.0], [13.7, 271.0], [13.8, 271.0], [13.9, 271.0], [14.0, 271.0], [14.1, 271.0], [14.2, 271.0], [14.3, 271.0], [14.4, 271.0], [14.5, 271.0], [14.6, 271.0], [14.7, 271.0], [14.8, 272.0], [14.9, 272.0], [15.0, 272.0], [15.1, 272.0], [15.2, 272.0], [15.3, 272.0], [15.4, 272.0], [15.5, 272.0], [15.6, 272.0], [15.7, 272.0], [15.8, 272.0], [15.9, 272.0], [16.0, 272.0], [16.1, 272.0], [16.2, 272.0], [16.3, 272.0], [16.4, 272.0], [16.5, 272.0], [16.6, 272.0], [16.7, 272.0], [16.8, 272.0], [16.9, 272.0], [17.0, 272.0], [17.1, 272.0], [17.2, 272.0], [17.3, 272.0], [17.4, 272.0], [17.5, 272.0], [17.6, 272.0], [17.7, 272.0], [17.8, 272.0], [17.9, 272.0], [18.0, 272.0], [18.1, 272.0], [18.2, 272.0], [18.3, 272.0], [18.4, 272.0], [18.5, 272.0], [18.6, 273.0], [18.7, 273.0], [18.8, 273.0], [18.9, 273.0], [19.0, 273.0], [19.1, 273.0], [19.2, 273.0], [19.3, 273.0], [19.4, 273.0], [19.5, 273.0], [19.6, 273.0], [19.7, 273.0], [19.8, 273.0], [19.9, 273.0], [20.0, 273.0], [20.1, 273.0], [20.2, 273.0], [20.3, 273.0], [20.4, 273.0], [20.5, 273.0], [20.6, 273.0], [20.7, 273.0], [20.8, 273.0], [20.9, 273.0], [21.0, 274.0], [21.1, 274.0], [21.2, 274.0], [21.3, 274.0], [21.4, 274.0], [21.5, 274.0], [21.6, 274.0], [21.7, 274.0], [21.8, 274.0], [21.9, 274.0], [22.0, 274.0], [22.1, 274.0], [22.2, 274.0], [22.3, 274.0], [22.4, 274.0], [22.5, 274.0], [22.6, 274.0], [22.7, 274.0], [22.8, 274.0], [22.9, 274.0], [23.0, 274.0], [23.1, 274.0], [23.2, 274.0], [23.3, 274.0], [23.4, 274.0], [23.5, 274.0], [23.6, 274.0], [23.7, 274.0], [23.8, 274.0], [23.9, 274.0], [24.0, 274.0], [24.1, 274.0], [24.2, 274.0], [24.3, 274.0], [24.4, 274.0], [24.5, 274.0], [24.6, 275.0], [24.7, 275.0], [24.8, 275.0], [24.9, 275.0], [25.0, 275.0], [25.1, 275.0], [25.2, 275.0], [25.3, 275.0], [25.4, 275.0], [25.5, 275.0], [25.6, 275.0], [25.7, 275.0], [25.8, 275.0], [25.9, 275.0], [26.0, 275.0], [26.1, 275.0], [26.2, 275.0], [26.3, 275.0], [26.4, 275.0], [26.5, 275.0], [26.6, 275.0], [26.7, 275.0], [26.8, 275.0], [26.9, 275.0], [27.0, 275.0], [27.1, 275.0], [27.2, 275.0], [27.3, 275.0], [27.4, 275.0], [27.5, 275.0], [27.6, 275.0], [27.7, 275.0], [27.8, 275.0], [27.9, 275.0], [28.0, 276.0], [28.1, 276.0], [28.2, 276.0], [28.3, 276.0], [28.4, 276.0], [28.5, 276.0], [28.6, 276.0], [28.7, 276.0], [28.8, 276.0], [28.9, 276.0], [29.0, 277.0], [29.1, 277.0], [29.2, 277.0], [29.3, 277.0], [29.4, 277.0], [29.5, 277.0], [29.6, 277.0], [29.7, 277.0], [29.8, 277.0], [29.9, 277.0], [30.0, 277.0], [30.1, 277.0], [30.2, 277.0], [30.3, 277.0], [30.4, 277.0], [30.5, 277.0], [30.6, 277.0], [30.7, 277.0], [30.8, 277.0], [30.9, 277.0], [31.0, 277.0], [31.1, 277.0], [31.2, 277.0], [31.3, 277.0], [31.4, 277.0], [31.5, 277.0], [31.6, 277.0], [31.7, 277.0], [31.8, 277.0], [31.9, 277.0], [32.0, 277.0], [32.1, 277.0], [32.2, 277.0], [32.3, 277.0], [32.4, 277.0], [32.5, 277.0], [32.6, 277.0], [32.7, 277.0], [32.8, 277.0], [32.9, 277.0], [33.0, 277.0], [33.1, 277.0], [33.2, 277.0], [33.3, 277.0], [33.4, 278.0], [33.5, 278.0], [33.6, 278.0], [33.7, 278.0], [33.8, 278.0], [33.9, 278.0], [34.0, 279.0], [34.1, 279.0], [34.2, 279.0], [34.3, 279.0], [34.4, 279.0], [34.5, 279.0], [34.6, 279.0], [34.7, 279.0], [34.8, 279.0], [34.9, 279.0], [35.0, 279.0], [35.1, 279.0], [35.2, 280.0], [35.3, 280.0], [35.4, 280.0], [35.5, 280.0], [35.6, 280.0], [35.7, 280.0], [35.8, 280.0], [35.9, 280.0], [36.0, 280.0], [36.1, 280.0], [36.2, 280.0], [36.3, 280.0], [36.4, 280.0], [36.5, 281.0], [36.6, 281.0], [36.7, 282.0], [36.8, 282.0], [36.9, 282.0], [37.0, 282.0], [37.1, 282.0], [37.2, 282.0], [37.3, 283.0], [37.4, 283.0], [37.5, 284.0], [37.6, 284.0], [37.7, 286.0], [37.8, 286.0], [37.9, 286.0], [38.0, 286.0], [38.1, 287.0], [38.2, 287.0], [38.3, 289.0], [38.4, 289.0], [38.5, 290.0], [38.6, 290.0], [38.7, 291.0], [38.8, 291.0], [38.9, 292.0], [39.0, 292.0], [39.1, 293.0], [39.2, 293.0], [39.3, 295.0], [39.4, 295.0], [39.5, 297.0], [39.6, 297.0], [39.7, 297.0], [39.8, 297.0], [39.9, 299.0], [40.0, 299.0], [40.1, 301.0], [40.2, 301.0], [40.3, 302.0], [40.4, 302.0], [40.5, 304.0], [40.6, 304.0], [40.7, 305.0], [40.8, 305.0], [40.9, 305.0], [41.0, 305.0], [41.1, 306.0], [41.2, 306.0], [41.3, 307.0], [41.4, 307.0], [41.5, 307.0], [41.6, 307.0], [41.7, 308.0], [41.8, 308.0], [41.9, 309.0], [42.0, 309.0], [42.1, 309.0], [42.2, 309.0], [42.3, 310.0], [42.4, 310.0], [42.5, 310.0], [42.6, 310.0], [42.7, 310.0], [42.8, 310.0], [42.9, 310.0], [43.0, 310.0], [43.1, 311.0], [43.2, 311.0], [43.3, 311.0], [43.4, 311.0], [43.5, 311.0], [43.6, 311.0], [43.7, 311.0], [43.8, 311.0], [43.9, 311.0], [44.0, 311.0], [44.1, 311.0], [44.2, 311.0], [44.3, 311.0], [44.4, 311.0], [44.5, 311.0], [44.6, 311.0], [44.7, 311.0], [44.8, 311.0], [44.9, 311.0], [45.0, 311.0], [45.1, 311.0], [45.2, 311.0], [45.3, 311.0], [45.4, 311.0], [45.5, 311.0], [45.6, 311.0], [45.7, 311.0], [45.8, 311.0], [45.9, 312.0], [46.0, 312.0], [46.1, 312.0], [46.2, 312.0], [46.3, 312.0], [46.4, 312.0], [46.5, 312.0], [46.6, 312.0], [46.7, 312.0], [46.8, 312.0], [46.9, 312.0], [47.0, 312.0], [47.1, 312.0], [47.2, 312.0], [47.3, 312.0], [47.4, 312.0], [47.5, 312.0], [47.6, 312.0], [47.7, 312.0], [47.8, 312.0], [47.9, 312.0], [48.0, 312.0], [48.1, 312.0], [48.2, 312.0], [48.3, 312.0], [48.4, 312.0], [48.5, 312.0], [48.6, 312.0], [48.7, 312.0], [48.8, 312.0], [48.9, 312.0], [49.0, 312.0], [49.1, 312.0], [49.2, 312.0], [49.3, 312.0], [49.4, 312.0], [49.5, 312.0], [49.6, 312.0], [49.7, 313.0], [49.8, 313.0], [49.9, 313.0], [50.0, 313.0], [50.1, 313.0], [50.2, 313.0], [50.3, 313.0], [50.4, 313.0], [50.5, 313.0], [50.6, 313.0], [50.7, 313.0], [50.8, 313.0], [50.9, 313.0], [51.0, 313.0], [51.1, 313.0], [51.2, 313.0], [51.3, 313.0], [51.4, 313.0], [51.5, 313.0], [51.6, 313.0], [51.7, 313.0], [51.8, 313.0], [51.9, 313.0], [52.0, 313.0], [52.1, 313.0], [52.2, 313.0], [52.3, 313.0], [52.4, 313.0], [52.5, 313.0], [52.6, 313.0], [52.7, 314.0], [52.8, 314.0], [52.9, 314.0], [53.0, 314.0], [53.1, 314.0], [53.2, 314.0], [53.3, 314.0], [53.4, 314.0], [53.5, 314.0], [53.6, 314.0], [53.7, 314.0], [53.8, 314.0], [53.9, 314.0], [54.0, 314.0], [54.1, 314.0], [54.2, 314.0], [54.3, 314.0], [54.4, 314.0], [54.5, 314.0], [54.6, 314.0], [54.7, 314.0], [54.8, 314.0], [54.9, 314.0], [55.0, 314.0], [55.1, 314.0], [55.2, 314.0], [55.3, 314.0], [55.4, 314.0], [55.5, 314.0], [55.6, 314.0], [55.7, 314.0], [55.8, 314.0], [55.9, 314.0], [56.0, 314.0], [56.1, 314.0], [56.2, 314.0], [56.3, 314.0], [56.4, 314.0], [56.5, 314.0], [56.6, 314.0], [56.7, 315.0], [56.8, 315.0], [56.9, 315.0], [57.0, 315.0], [57.1, 315.0], [57.2, 315.0], [57.3, 315.0], [57.4, 315.0], [57.5, 315.0], [57.6, 315.0], [57.7, 315.0], [57.8, 315.0], [57.9, 315.0], [58.0, 315.0], [58.1, 315.0], [58.2, 315.0], [58.3, 315.0], [58.4, 315.0], [58.5, 315.0], [58.6, 315.0], [58.7, 315.0], [58.8, 315.0], [58.9, 315.0], [59.0, 315.0], [59.1, 315.0], [59.2, 315.0], [59.3, 315.0], [59.4, 315.0], [59.5, 315.0], [59.6, 315.0], [59.7, 315.0], [59.8, 315.0], [59.9, 315.0], [60.0, 315.0], [60.1, 315.0], [60.2, 315.0], [60.3, 315.0], [60.4, 315.0], [60.5, 315.0], [60.6, 315.0], [60.7, 315.0], [60.8, 315.0], [60.9, 315.0], [61.0, 315.0], [61.1, 315.0], [61.2, 315.0], [61.3, 315.0], [61.4, 315.0], [61.5, 315.0], [61.6, 315.0], [61.7, 315.0], [61.8, 315.0], [61.9, 315.0], [62.0, 315.0], [62.1, 315.0], [62.2, 315.0], [62.3, 316.0], [62.4, 316.0], [62.5, 316.0], [62.6, 316.0], [62.7, 316.0], [62.8, 316.0], [62.9, 316.0], [63.0, 316.0], [63.1, 316.0], [63.2, 316.0], [63.3, 316.0], [63.4, 316.0], [63.5, 316.0], [63.6, 316.0], [63.7, 316.0], [63.8, 316.0], [63.9, 316.0], [64.0, 316.0], [64.1, 316.0], [64.2, 316.0], [64.3, 316.0], [64.4, 316.0], [64.5, 316.0], [64.6, 316.0], [64.7, 316.0], [64.8, 316.0], [64.9, 316.0], [65.0, 316.0], [65.1, 316.0], [65.2, 316.0], [65.3, 316.0], [65.4, 316.0], [65.5, 316.0], [65.6, 316.0], [65.7, 316.0], [65.8, 316.0], [65.9, 316.0], [66.0, 316.0], [66.1, 316.0], [66.2, 316.0], [66.3, 316.0], [66.4, 316.0], [66.5, 317.0], [66.6, 317.0], [66.7, 317.0], [66.8, 317.0], [66.9, 317.0], [67.0, 317.0], [67.1, 317.0], [67.2, 317.0], [67.3, 317.0], [67.4, 317.0], [67.5, 317.0], [67.6, 317.0], [67.7, 317.0], [67.8, 317.0], [67.9, 317.0], [68.0, 317.0], [68.1, 317.0], [68.2, 317.0], [68.3, 317.0], [68.4, 317.0], [68.5, 317.0], [68.6, 317.0], [68.7, 317.0], [68.8, 317.0], [68.9, 317.0], [69.0, 317.0], [69.1, 317.0], [69.2, 317.0], [69.3, 317.0], [69.4, 317.0], [69.5, 318.0], [69.6, 318.0], [69.7, 318.0], [69.8, 318.0], [69.9, 318.0], [70.0, 318.0], [70.1, 318.0], [70.2, 318.0], [70.3, 318.0], [70.4, 318.0], [70.5, 318.0], [70.6, 318.0], [70.7, 318.0], [70.8, 318.0], [70.9, 318.0], [71.0, 318.0], [71.1, 318.0], [71.2, 318.0], [71.3, 318.0], [71.4, 318.0], [71.5, 318.0], [71.6, 318.0], [71.7, 318.0], [71.8, 318.0], [71.9, 318.0], [72.0, 318.0], [72.1, 318.0], [72.2, 318.0], [72.3, 318.0], [72.4, 318.0], [72.5, 318.0], [72.6, 318.0], [72.7, 318.0], [72.8, 318.0], [72.9, 318.0], [73.0, 318.0], [73.1, 319.0], [73.2, 319.0], [73.3, 319.0], [73.4, 319.0], [73.5, 319.0], [73.6, 319.0], [73.7, 319.0], [73.8, 319.0], [73.9, 319.0], [74.0, 319.0], [74.1, 319.0], [74.2, 319.0], [74.3, 319.0], [74.4, 319.0], [74.5, 319.0], [74.6, 319.0], [74.7, 319.0], [74.8, 319.0], [74.9, 319.0], [75.0, 319.0], [75.1, 319.0], [75.2, 319.0], [75.3, 319.0], [75.4, 319.0], [75.5, 319.0], [75.6, 319.0], [75.7, 319.0], [75.8, 319.0], [75.9, 319.0], [76.0, 319.0], [76.1, 319.0], [76.2, 319.0], [76.3, 319.0], [76.4, 319.0], [76.5, 319.0], [76.6, 319.0], [76.7, 319.0], [76.8, 319.0], [76.9, 319.0], [77.0, 319.0], [77.1, 320.0], [77.2, 320.0], [77.3, 320.0], [77.4, 320.0], [77.5, 320.0], [77.6, 320.0], [77.7, 320.0], [77.8, 320.0], [77.9, 320.0], [78.0, 320.0], [78.1, 320.0], [78.2, 320.0], [78.3, 320.0], [78.4, 320.0], [78.5, 320.0], [78.6, 320.0], [78.7, 320.0], [78.8, 320.0], [78.9, 320.0], [79.0, 320.0], [79.1, 320.0], [79.2, 320.0], [79.3, 320.0], [79.4, 320.0], [79.5, 321.0], [79.6, 321.0], [79.7, 321.0], [79.8, 321.0], [79.9, 321.0], [80.0, 321.0], [80.1, 321.0], [80.2, 321.0], [80.3, 321.0], [80.4, 321.0], [80.5, 322.0], [80.6, 322.0], [80.7, 322.0], [80.8, 322.0], [80.9, 322.0], [81.0, 322.0], [81.1, 322.0], [81.2, 322.0], [81.3, 322.0], [81.4, 322.0], [81.5, 322.0], [81.6, 322.0], [81.7, 322.0], [81.8, 322.0], [81.9, 322.0], [82.0, 322.0], [82.1, 322.0], [82.2, 322.0], [82.3, 322.0], [82.4, 322.0], [82.5, 322.0], [82.6, 322.0], [82.7, 322.0], [82.8, 322.0], [82.9, 322.0], [83.0, 322.0], [83.1, 323.0], [83.2, 323.0], [83.3, 323.0], [83.4, 323.0], [83.5, 323.0], [83.6, 323.0], [83.7, 323.0], [83.8, 323.0], [83.9, 323.0], [84.0, 323.0], [84.1, 323.0], [84.2, 323.0], [84.3, 323.0], [84.4, 323.0], [84.5, 323.0], [84.6, 323.0], [84.7, 323.0], [84.8, 323.0], [84.9, 323.0], [85.0, 323.0], [85.1, 324.0], [85.2, 324.0], [85.3, 324.0], [85.4, 324.0], [85.5, 324.0], [85.6, 324.0], [85.7, 324.0], [85.8, 324.0], [85.9, 324.0], [86.0, 324.0], [86.1, 324.0], [86.2, 324.0], [86.3, 324.0], [86.4, 324.0], [86.5, 325.0], [86.6, 325.0], [86.7, 325.0], [86.8, 325.0], [86.9, 325.0], [87.0, 325.0], [87.1, 325.0], [87.2, 325.0], [87.3, 326.0], [87.4, 326.0], [87.5, 326.0], [87.6, 326.0], [87.7, 326.0], [87.8, 326.0], [87.9, 326.0], [88.0, 326.0], [88.1, 326.0], [88.2, 326.0], [88.3, 326.0], [88.4, 326.0], [88.5, 327.0], [88.6, 327.0], [88.7, 327.0], [88.8, 327.0], [88.9, 327.0], [89.0, 327.0], [89.1, 327.0], [89.2, 327.0], [89.3, 327.0], [89.4, 327.0], [89.5, 328.0], [89.6, 328.0], [89.7, 328.0], [89.8, 328.0], [89.9, 328.0], [90.0, 328.0], [90.1, 328.0], [90.2, 328.0], [90.3, 329.0], [90.4, 329.0], [90.5, 329.0], [90.6, 329.0], [90.7, 329.0], [90.8, 329.0], [90.9, 329.0], [91.0, 329.0], [91.1, 330.0], [91.2, 330.0], [91.3, 330.0], [91.4, 330.0], [91.5, 330.0], [91.6, 330.0], [91.7, 330.0], [91.8, 330.0], [91.9, 330.0], [92.0, 330.0], [92.1, 330.0], [92.2, 330.0], [92.3, 331.0], [92.4, 331.0], [92.5, 331.0], [92.6, 331.0], [92.7, 332.0], [92.8, 332.0], [92.9, 332.0], [93.0, 332.0], [93.1, 333.0], [93.2, 333.0], [93.3, 333.0], [93.4, 333.0], [93.5, 334.0], [93.6, 334.0], [93.7, 334.0], [93.8, 334.0], [93.9, 335.0], [94.0, 335.0], [94.1, 336.0], [94.2, 336.0], [94.3, 336.0], [94.4, 336.0], [94.5, 336.0], [94.6, 336.0], [94.7, 336.0], [94.8, 336.0], [94.9, 338.0], [95.0, 338.0], [95.1, 338.0], [95.2, 338.0], [95.3, 339.0], [95.4, 339.0], [95.5, 339.0], [95.6, 339.0], [95.7, 340.0], [95.8, 340.0], [95.9, 341.0], [96.0, 341.0], [96.1, 341.0], [96.2, 341.0], [96.3, 342.0], [96.4, 342.0], [96.5, 342.0], [96.6, 342.0], [96.7, 346.0], [96.8, 346.0], [96.9, 349.0], [97.0, 349.0], [97.1, 747.0], [97.2, 747.0], [97.3, 754.0], [97.4, 754.0], [97.5, 772.0], [97.6, 772.0], [97.7, 775.0], [97.8, 775.0], [97.9, 776.0], [98.0, 776.0], [98.1, 795.0], [98.2, 795.0], [98.3, 796.0], [98.4, 796.0], [98.5, 796.0], [98.6, 796.0], [98.7, 805.0], [98.8, 805.0], [98.9, 809.0], [99.0, 809.0], [99.1, 835.0], [99.2, 835.0], [99.3, 890.0], [99.4, 890.0], [99.5, 909.0], [99.6, 909.0], [99.7, 1079.0], [99.8, 1079.0], [99.9, 1275.0], [100.0, 1275.0]], "isOverall": false, "label": "CreateBooking", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 285.0, "series": [{"data": [[2100.0, 21.0], [2200.0, 40.0], [2300.0, 14.0], [2400.0, 2.0], [2700.0, 8.0], [2800.0, 2.0], [2900.0, 3.0], [3100.0, 1.0], [3300.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3600.0, 1.0], [1000.0, 55.0], [1100.0, 66.0], [1200.0, 174.0], [1300.0, 42.0], [1400.0, 3.0], [1500.0, 6.0], [1600.0, 6.0], [1700.0, 8.0], [1800.0, 11.0], [1900.0, 28.0], [2000.0, 6.0]], "isOverall": false, "label": "auth", "isController": false}, {"data": [[600.0, 84.0], [2500.0, 1.0], [700.0, 3.0], [800.0, 7.0], [200.0, 9.0], [900.0, 3.0], [1000.0, 3.0], [1100.0, 5.0], [300.0, 207.0], [1200.0, 3.0], [1300.0, 3.0], [1800.0, 1.0], [500.0, 171.0]], "isOverall": false, "label": "GetBooking", "isController": false}, {"data": [[300.0, 285.0], [1200.0, 1.0], [700.0, 8.0], [800.0, 4.0], [200.0, 200.0], [900.0, 1.0], [1000.0, 1.0]], "isOverall": false, "label": "CreateBooking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 162.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 701.0, "series": [{"data": [[0.0, 701.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 637.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 162.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 113.57866666666663, "minX": 1.70935572E12, "maxY": 113.57866666666663, "series": [{"data": [[1.70935572E12, 113.57866666666663]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70935572E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 267.0, "minX": 2.0, "maxY": 2865.0, "series": [{"data": [[43.0, 1121.0], [42.0, 1529.0], [44.0, 1085.0], [47.0, 1079.0], [48.0, 1086.0], [50.0, 1090.3333333333333], [52.0, 1093.0], [54.0, 1097.5], [57.0, 1102.0], [56.0, 1085.0], [59.0, 1109.0], [60.0, 1099.0], [62.0, 1099.0], [67.0, 1105.0], [66.0, 1104.0], [64.0, 1104.0], [71.0, 1098.5], [70.0, 1091.5], [69.0, 1087.0], [72.0, 1115.5], [79.0, 1086.0], [78.0, 1086.0], [76.0, 1098.5], [83.0, 1091.0], [81.0, 1102.0], [85.0, 1095.0], [91.0, 1100.0], [90.0, 1100.5], [88.0, 1600.0], [94.0, 1098.0], [92.0, 1089.0], [99.0, 1098.0], [98.0, 1095.0], [97.0, 1085.0], [103.0, 1098.5], [102.0, 1095.6666666666667], [101.0, 1095.0], [100.0, 1095.3333333333333], [107.0, 1106.5], [106.0, 1212.3333333333333], [105.0, 1091.0], [104.0, 1094.6], [110.0, 1121.0], [109.0, 1319.0], [108.0, 1104.0], [115.0, 1136.0], [113.0, 1308.25], [114.0, 1118.0], [118.0, 1282.7599999999995], [119.0, 1519.3928571428573], [117.0, 1376.5], [116.0, 1489.6666666666665], [122.0, 1572.674418604651], [123.0, 1656.9199999999998], [120.0, 1406.2857142857142], [121.0, 1515.222222222222], [124.0, 1592.0714285714282], [127.0, 1563.5909090909092], [126.0, 1734.2916666666667], [125.0, 1580.1923076923078], [128.0, 1834.7499999999998], [129.0, 1748.086956521739], [131.0, 1448.4], [130.0, 1520.5], [134.0, 2110.0], [133.0, 2148.1111111111113], [135.0, 1605.3333333333333], [132.0, 1860.2173913043473], [137.0, 1483.7142857142856], [138.0, 1324.6], [139.0, 1384.0], [140.0, 1356.6666666666667], [141.0, 1352.0], [142.0, 1456.0], [143.0, 1510.0], [136.0, 2530.0], [145.0, 1587.0], [146.0, 2536.5], [147.0, 2476.6666666666665], [151.0, 2529.5], [144.0, 1314.0], [154.0, 2865.0]], "isOverall": false, "label": "auth", "isController": false}, {"data": [[118.01600000000009, 1525.5239999999994]], "isOverall": false, "label": "auth-Aggregated", "isController": false}, {"data": [[15.0, 544.5], [17.0, 544.0], [20.0, 543.0], [21.0, 533.0], [22.0, 543.0], [23.0, 541.5], [24.0, 540.5], [25.0, 551.0], [27.0, 543.5], [28.0, 536.0], [30.0, 539.0], [32.0, 539.6666666666666], [35.0, 547.0], [34.0, 538.5], [39.0, 538.0], [38.0, 540.0], [40.0, 539.5], [43.0, 534.0], [42.0, 537.0], [45.0, 551.0], [44.0, 539.0], [47.0, 542.0], [46.0, 540.0], [48.0, 548.0], [51.0, 534.0], [50.0, 536.0], [53.0, 539.0], [52.0, 541.5], [54.0, 541.0], [57.0, 544.0], [56.0, 536.0], [59.0, 546.0], [58.0, 548.5], [60.0, 551.0], [62.0, 544.6666666666666], [67.0, 539.5], [66.0, 550.0], [64.0, 540.0], [71.0, 554.0], [70.0, 540.0], [69.0, 541.0], [73.0, 564.0], [72.0, 550.0], [79.0, 541.0], [78.0, 538.0], [76.0, 546.0], [81.0, 551.0], [85.0, 543.0], [84.0, 540.0], [91.0, 539.3333333333334], [90.0, 554.0], [88.0, 544.5], [94.0, 548.5], [92.0, 539.0], [99.0, 536.0], [98.0, 538.6666666666666], [103.0, 543.5], [102.0, 540.5], [101.0, 539.8333333333334], [100.0, 544.5], [106.0, 543.75], [105.0, 540.9166666666667], [104.0, 542.5], [107.0, 544.0], [111.0, 541.0], [110.0, 539.6666666666666], [109.0, 548.75], [108.0, 540.25], [115.0, 454.0], [113.0, 544.3333333333334], [114.0, 279.0], [112.0, 537.5], [119.0, 534.4062499999999], [118.0, 481.6363636363636], [116.0, 558.8], [117.0, 487.9090909090909], [123.0, 526.4347826086957], [122.0, 469.0], [120.0, 553.0], [121.0, 687.2857142857142], [127.0, 402.08333333333337], [126.0, 494.9565217391305], [125.0, 475.3636363636364], [124.0, 527.5238095238096], [131.0, 434.1818181818182], [130.0, 477.4666666666666], [132.0, 405.0], [134.0, 400.63636363636357], [135.0, 772.0], [133.0, 663.2307692307693], [128.0, 460.11111111111114], [129.0, 439.0], [140.0, 343.56249999999994], [141.0, 377.5], [142.0, 381.8823529411765], [136.0, 803.5], [137.0, 380.0], [138.0, 392.6], [144.0, 319.0], [145.0, 328.5], [146.0, 333.0], [147.0, 356.0], [152.0, 319.0], [153.0, 316.0], [154.0, 318.0], [155.0, 314.0]], "isOverall": false, "label": "GetBooking", "isController": false}, {"data": [[113.21599999999995, 498.41599999999966]], "isOverall": false, "label": "GetBooking-Aggregated", "isController": false}, {"data": [[2.0, 274.5], [3.0, 275.0], [4.0, 274.0], [5.0, 277.0], [6.0, 275.0], [7.0, 277.0], [9.0, 272.0], [10.0, 279.0], [12.0, 273.5], [13.0, 277.0], [14.0, 274.0], [15.0, 269.0], [16.0, 270.0], [17.0, 275.0], [19.0, 275.0], [20.0, 274.0], [21.0, 277.0], [22.0, 276.0], [23.0, 269.0], [24.0, 274.0], [25.0, 275.0], [26.0, 270.0], [27.0, 272.0], [28.0, 268.0], [30.0, 275.0], [31.0, 273.0], [33.0, 279.0], [32.0, 269.0], [35.0, 277.0], [34.0, 279.0], [37.0, 275.0], [36.0, 277.0], [39.0, 272.0], [38.0, 276.0], [41.0, 270.0], [40.0, 271.0], [43.0, 278.0], [42.0, 269.0], [45.0, 271.0], [44.0, 274.0], [47.0, 281.0], [46.0, 269.0], [49.0, 271.0], [48.0, 277.0], [51.0, 277.0], [50.0, 276.0], [53.0, 270.0], [52.0, 272.0], [54.0, 271.0], [57.0, 272.0], [56.0, 269.5], [59.0, 277.0], [58.0, 268.0], [61.0, 275.0], [60.0, 268.0], [62.0, 268.0], [67.0, 273.0], [66.0, 268.0], [65.0, 270.0], [64.0, 269.5], [71.0, 269.0], [70.0, 269.0], [69.0, 268.0], [75.0, 271.5], [73.0, 267.0], [72.0, 282.0], [79.0, 270.0], [78.0, 273.0], [77.0, 269.0], [76.0, 274.0], [83.0, 272.0], [82.0, 272.0], [81.0, 269.0], [80.0, 267.0], [87.0, 270.0], [86.0, 272.0], [85.0, 271.0], [84.0, 272.0], [91.0, 275.0], [90.0, 287.0], [89.0, 273.0], [88.0, 282.0], [94.0, 279.0], [92.0, 280.0], [99.0, 269.0], [98.0, 271.0], [97.0, 270.0], [96.0, 270.5], [103.0, 273.0], [102.0, 275.0], [101.0, 274.75], [100.0, 277.0], [107.0, 271.3333333333333], [106.0, 272.66666666666674], [105.0, 271.6666666666667], [104.0, 274.0], [111.0, 275.0], [110.0, 273.0], [109.0, 276.83333333333337], [108.0, 272.18181818181813], [115.0, 278.5], [113.0, 274.75], [114.0, 280.0], [112.0, 274.5], [119.0, 298.0769230769231], [118.0, 276.27272727272725], [117.0, 290.0], [116.0, 273.0], [123.0, 316.42857142857133], [122.0, 312.45], [121.0, 310.5333333333333], [120.0, 311.2105263157895], [127.0, 342.59999999999997], [126.0, 318.91999999999996], [125.0, 344.89473684210526], [124.0, 334.32], [135.0, 394.14285714285717], [131.0, 387.66666666666674], [130.0, 376.25000000000006], [129.0, 392.37499999999994], [128.0, 363.46153846153845], [132.0, 414.3333333333333], [134.0, 357.33333333333337], [133.0, 353.40000000000003], [143.0, 327.0], [142.0, 326.0], [141.0, 329.0], [140.0, 337.5], [138.0, 330.0], [137.0, 445.25], [139.0, 561.5], [136.0, 318.3333333333333], [151.0, 313.0], [150.0, 313.0], [149.0, 315.0], [148.0, 314.0], [145.0, 313.0], [144.0, 322.0], [155.0, 311.0], [154.0, 312.0], [153.0, 316.0], [152.0, 314.5]], "isOverall": false, "label": "CreateBooking", "isController": false}, {"data": [[109.50399999999993, 317.1319999999999]], "isOverall": false, "label": "CreateBooking-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 155.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7033.333333333333, "minX": 1.70935572E12, "maxY": 182850.41666666666, "series": [{"data": [[1.70935572E12, 182850.41666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70935572E12, 7033.333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70935572E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 317.1319999999999, "minX": 1.70935572E12, "maxY": 1525.5239999999994, "series": [{"data": [[1.70935572E12, 1525.5239999999994]], "isOverall": false, "label": "auth", "isController": false}, {"data": [[1.70935572E12, 498.41599999999966]], "isOverall": false, "label": "GetBooking", "isController": false}, {"data": [[1.70935572E12, 317.1319999999999]], "isOverall": false, "label": "CreateBooking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70935572E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 317.1059999999998, "minX": 1.70935572E12, "maxY": 1525.416000000001, "series": [{"data": [[1.70935572E12, 1525.416000000001]], "isOverall": false, "label": "auth", "isController": false}, {"data": [[1.70935572E12, 377.8959999999997]], "isOverall": false, "label": "GetBooking", "isController": false}, {"data": [[1.70935572E12, 317.1059999999998]], "isOverall": false, "label": "CreateBooking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70935572E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70935572E12, "maxY": 1199.45, "series": [{"data": [[1.70935572E12, 1199.45]], "isOverall": false, "label": "auth", "isController": false}, {"data": [[1.70935572E12, 0.0]], "isOverall": false, "label": "GetBooking", "isController": false}, {"data": [[1.70935572E12, 0.0]], "isOverall": false, "label": "CreateBooking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70935572E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 266.0, "minX": 1.70935572E12, "maxY": 3693.0, "series": [{"data": [[1.70935572E12, 3693.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70935572E12, 266.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70935572E12, 1700.3000000000006]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70935572E12, 2733.87]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70935572E12, 540.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.70935572E12, 2199.6500000000005]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70935572E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 277.0, "minX": 28.0, "maxY": 621.0, "series": [{"data": [[133.0, 539.0], [153.0, 331.0], [156.0, 338.0], [158.0, 621.0], [160.0, 343.5], [173.0, 329.0], [168.0, 541.0], [176.0, 389.0], [195.0, 544.0], [28.0, 277.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 195.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 275.0, "minX": 28.0, "maxY": 389.0, "series": [{"data": [[133.0, 275.0], [153.0, 330.0], [156.0, 327.5], [158.0, 322.0], [160.0, 331.0], [173.0, 329.0], [168.0, 276.0], [176.0, 389.0], [195.0, 283.0], [28.0, 275.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 195.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.70935572E12, "maxY": 25.0, "series": [{"data": [[1.70935572E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70935572E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.70935572E12, "maxY": 25.0, "series": [{"data": [[1.70935572E12, 25.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70935572E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.70935572E12, "maxY": 8.333333333333334, "series": [{"data": [[1.70935572E12, 8.333333333333334]], "isOverall": false, "label": "GetBooking-success", "isController": false}, {"data": [[1.70935572E12, 8.333333333333334]], "isOverall": false, "label": "CreateBooking-success", "isController": false}, {"data": [[1.70935572E12, 8.333333333333334]], "isOverall": false, "label": "auth-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70935572E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.70935572E12, "maxY": 25.0, "series": [{"data": [[1.70935572E12, 25.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70935572E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

